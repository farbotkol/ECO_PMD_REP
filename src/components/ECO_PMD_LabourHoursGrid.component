<apex:component controller="ECO_PMD_ProjectWrapper_Controller" extensions="ECO_PMD_LabourHoursGrid_Controller">
   <apex:attribute name="proj" assignTo="{!wrapper}" description="Project Wrapper" type="ECO_PMD_ProjectWrapper" required="true" />
   <apex:attribute name="obj" description="Object ID" type="String" required="true" />
    
    <apex:includeScript value="{!URLFOR($Resource.ECO_GrahamTest3, 'angular.js')}"/> 
    <!-- <apex:includeScript value="{!$Resource.ECO_jQuery_1_11_2_min_js}"/> -->
    <!-- http://www.ag-grid.com/documentation.php -->
    <apex:includeScript value="{!URLFOR($Resource.agGrid210, 'dist/ag-grid.min.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.agGrid210, 'dist/ag-grid.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.agGrid210, 'dist/theme-fresh.min.css')}"/>
    <!--<apex:stylesheet value="{!URLFOR($Resource.fontAwesome440, 'css/font-awesome.min.css')}"/> -->
    
    <script>
    angular.module('twygmbh.auto-height', []).directive('autoHeight', [
        /**
         * @version 0.0.4
         * @copyright TWY GmbH [All Rights Reserved]
         * @license MIT License (see LICENSE.txt)
         */
        '$window', '$timeout', function($window, $timeout) {
            return {
                link: function($scope, $element, $attrs) {
                    var combineHeights, siblings;
                    combineHeights = function(collection) {
                        var heights, i, len, node;
                        heights = 0;
                        for (i = 0, len = collection.length; i < len; i++) {
                            node = collection[i];
                            heights += node.offsetHeight;
                        }
                        return heights;
                    };
                    siblings = function($elm) {
                        var elm, i, len, ref, results;
                        ref = $elm.parent().children();
                        results = [];
                        for (i = 0, len = ref.length; i < len; i++) {
                            elm = ref[i];
                            if (elm !== $elm[0]) {
                                results.push(elm);
                            }
                        }
                        return results;
                    };
                    angular.element($window).bind('resize', function() {
                        var additionalHeight, parentHeight;
                        additionalHeight = $attrs.additionalHeight || 0;
                        parentHeight = $window.innerHeight - $element.parent()[0].getBoundingClientRect().top;
                        return $element.css('height', (parentHeight - combineHeights(siblings($element)) - additionalHeight) + "px");
                    });
                    return $timeout(function() {
                        return angular.element($window).triggerHandler('resize');
                    }, 1000);
                }
            };
        }
    ]);
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Faker/3.0.1/faker.min.js"></script>
    <script>
var eco_laborhours_module = (function($,angular){
    /* *********************************************************************************** */
    /* Set up the Grid */
    
    var gridsModule = angular.module("testAngularGrid", ["agGrid","twygmbh.auto-height"]);

	gridsModule.controller('mainController', function($scope) {
    
        var booleanValues = [true, "true", false, "false", null, undefined, ""];
    
        $scope.colCount = 20;
        $scope.rowCount = 100;
        $scope.pinnedColumnCount = 0;
    
        $scope.size = 'fill'; // model for size select
        $scope.width = '100%'; // the div gets it's width and height from here
        $scope.height = '100%';
    
        $scope.style = 'ag-fresh';
        $scope.groupBy = '';
        $scope.groupType = 'col';
        $scope.groupHeaders = 'true';
        $scope.rowSelection = 'checkbox';
    
        var angularGrid = {
            //rowsBuffer: 1,
            columnDefs: [],
            rowData: null,
            rowsAlreadyGrouped: false, // set this to true, if you are passing in data alrady in nodes and groups
            groupHeaders: true,
            groupKeys: undefined, //set as string of keys eg ["region","country"],
    //            groupUseEntireRow: true, //one of [true, false]
            groupDefaultExpanded: true, //one of [true, false], or an integer if greater than 1
    //            headerHeight: 100, // set to an integer, default is 25, or 50 if grouping columns
    //        groupSuppressAutoColumn: true,
            //groupSuppressBlankHeader: true,
            groupIncludeFooter: false,
            groupHidePivotColumns: true,
            //unSortIcon: true,
            pinnedColumnCount: 0, //and integer, zero or more, default is 0
            //rowHeight: 30, // defaults to 25, can be any integer
            enableColResize: true, //one of [true, false]
            enableSorting: true, //one of [true, false]
            enableFilter: true, //one of [true, false]
            rowSelection: "multiple", // one of ['single','multiple'], leave blank for no selection
            rowDeselection: true,
            groupSelectsChildren: true, // one of [true, false]
            suppressRowClickSelection: true, // if true, clicking rows doesn't select (useful for checkbox selection)
            //groupColumnDef: groupColumn,
            //suppressCellSelection: true,
            //suppressMultiSort: true,
            showToolPanel: false,
            //toolPanelSuppressPivot: true,
            toolPanelSuppressValues: true,
            groupSuppressAutoColumn: false,
            //groupAggFunction: groupAggFunction,
            //groupAggFields: ['bankBalance','totalWinnings'],
            angularCompileRows: false,
            angularCompileFilters: true,
            angularCompileHeaders: true,
            //forPrint: true,
            //rowClass: function(params) { return (params.data.country === 'Ireland') ? "theClass" : null; },
            //headerCellRenderer: headerCellRenderer_text,
            //headerCellRenderer: headerCellRenderer_dom,
            onRowSelected: rowSelected, //callback when row selected
            onSelectionChanged: selectionChanged, //callback when selection changed,
            icons: {
                //menu: '<i class="fa fa-bars"/>',
                //columnVisible: '<i class="fa fa-eye"/>',
                //columnHidden: '<i class="fa fa-eye-slash"/>',
                columnRemoveFromGroup: '<i class="fa fa-remove"/>',
                filter: '<i class="fa fa-filter"/>',
                sortAscending: '<i class="fa fa-long-arrow-down"/>',
                sortDescending: '<i class="fa fa-long-arrow-up"/>',
                groupExpanded: '<i class="fa fa-minus-square-o"/>',
                groupContracted: '<i class="fa fa-plus-square-o"/>',
                headerGroupOpened: '<i class="fa fa-minus-square-o"/>',
                headerGroupClosed: '<i class="fa fa-plus-square-o"/>'
            },
    
            // isScrollLag: function() { return false; },
            //suppressScrollLag: true,
    
            // callback when row clicked
            onRowClicked: function(params) {
                console.log("Callback onRowClicked: " + params.data + " - " + params.event);
            },
            // callback when cell clicked
            onCellClicked: function(params) {
                console.log("Callback onCellClicked: " + params.value + " - " + params.colDef.field + ' - ' + params.event);
            },
            // callback when cell double clicked
            onCellDoubleClicked:  function(params) {
                console.log("Callback onCellDoubleClicked: " + params.value + " - " + params.colDef.field + ' - ' + params.event);
            },
            // callback when cell right clicked
            onCellContextMenu:  function(params) {
                console.log("Callback onCellContextMenu: " + params.value + " - " + params.colDef.field + ' - ' + params.event);
            },
            onCellFocused: function(params) {
                console.log('Callback onCellFocused: ' + params.rowIndex + " - " + params.colIndex);
            },
            onReady: function(event) {
                console.log('Callback onReady: api = ' + event.api);
            }
        };
        $scope.angularGrid = angularGrid;
        
        $scope.jumpToCol = function() {
            var index = Number($scope.jumpToColText);
            if (typeof index === 'number' && !isNaN(index)) {
                angularGrid.api.ensureColIndexVisible(index);
            }
        };
    
        $scope.jumpToRow = function() {
            var index = Number($scope.jumpToRowText);
            if (typeof index === 'number' && !isNaN(index)) {
                angularGrid.api.ensureIndexVisible(index);
            }
        };
    
        $scope.onRowCountChanged = function() {
            angularGrid.api.showLoading(true);
            // put into a timeout, so browser gets a chance to update the loading panel
            setTimeout( function () {
                var data = createData();
                angularGrid.api.setRowData(data);
            }, 0);
        };
    
        $scope.onPinnedColCountChanged = function() {
            var newCount = Number($scope.pinnedColumnCount);
            angularGrid.columnApi.setPinnedColumnCount(newCount);
        };
    
        $scope.onColCountChanged = function() {
            angularGrid.api.showLoading(true);
            setTimeout( function () {
                var colDefs = createCols();
                var data = createData();
                angularGrid.api.setColumnDefs(colDefs);
                angularGrid.api.setRowData(data);
            });
        };
    
        $scope.onSelectionChanged = function() {
            switch ($scope.rowSelection) {
                case 'checkbox' :
                    //firstColumn.checkboxSelection = true;
                    //groupColumn.cellRenderer.checkbox = true;
                    firstColumn.cellRenderer.checkbox = true;
                    angularGrid.rowSelection = 'multiple';
                    angularGrid.suppressRowClickSelection = true;
                    break;
                case 'single' :
                    //firstColumn.checkboxSelection = false;
                    //groupColumn.cellRenderer.checkbox = false;
                    firstColumn.cellRenderer.checkbox = false;
                    angularGrid.rowSelection = 'single';
                    angularGrid.suppressRowClickSelection = false;
                    break;
                case 'multiple' :
                    //firstColumn.checkboxSelection = false;
                    //groupColumn.cellRenderer.checkbox = false;
                    firstColumn.cellRenderer.checkbox = false;
                    angularGrid.rowSelection = 'multiple';
                    angularGrid.suppressRowClickSelection = false;
                    break;
                default :
                    // turn selection off
                    //firstColumn.checkboxSelection = false;
                    //groupColumn.cellRenderer.checkbox = false;
                    firstColumn.cellRenderer.checkbox = false;
                    angularGrid.rowSelection = null;
                    angularGrid.suppressRowClickSelection = false;
                    break;
            }
            angularGrid.api.deselectAll();
        };
    
        $scope.onGroupHeaders = function() {
            var groupHeaders = $scope.groupHeaders === 'true';
            angularGrid.api.setGroupHeaders(groupHeaders);
        };
    
        $scope.onSize = function() {
            if ($scope.size === 'fill') {
                $scope.width = '100%';
                $scope.height = '100%';
            } else {
                $scope.width = '800px';
                $scope.height = '600px';
            }
            setTimeout( function() {
                angularGrid.api.doLayout();
            }, 0);
        };
    
        $scope.onGroupTypeChanged = function() {
            // setup keys
            var groupBy = null;
            if ($scope.groupBy!=="") {
                groupBy = $scope.groupBy.split(",");
            }
            angularGrid.groupKeys = groupBy;
    
            // setup type
            var groupUseEntireRow = $scope.groupType==='row' || $scope.groupType==='rowWithFooter';
            angularGrid.groupUseEntireRow = groupUseEntireRow;
    
            // use footer or not
            var useFooter = $scope.groupType==='colWithFooter' || $scope.groupType==='rowWithFooter';
            angularGrid.groupIncludeFooter = useFooter;
    
            angularGrid.api.refreshPivot();
        };
    
        $scope.toggleToolPanel = function() {
            var showing = angularGrid.api.isToolPanelShowing();
            angularGrid.api.showToolPanel(!showing);
        };
 
        function selectionChanged(event) {
            console.log('Callback selectionChanged: selection count = ' + event.selectedRows.length);
        }
    
        function rowSelected(event) {
            // this clogs the console, when to many rows displayed, and use selected 'select all'.
            // so check 'not to many rows'
            if (angularGrid.rowData.length <= 100) {
                var valueToPrint = event.node.group ? 'group ('+event.node.key+')' : event.node.data.name;
                console.log("Callback rowSelected: " + valueToPrint);
            }
        }
        
        /*
        $scope.angularGrid. = {
            columnDefs: columnDefs,
            rowData: null,
            groupUseEntireRow: false,
            groupKeys: ['country'],
            groupAggFields: ['gold','silver','bronze','total'],
            groupIncludeFooter: true,
            groupColumnDef: {headerName: "Athlete",
                field: "athlete",
                width: 200,
                cellRenderer: {
                    renderer: 'group',
                    footerValueGetter: '"Total (" + x + ")"',
                    padding: 5
                }}
        };
        */

        // ------------------------------------     
        //loadRowsReport($scope)
        //loadRowsRemoting($scope);
        loadRowsRemotePaging($scope);
        
        });
        
    /* *********************************************************************************** */
    /* BELOW IS THE ANGULAR GRID DEMO SUPPORT FUNCTIONS */
    
    function numberNewValueHandler(params) {
        var valueAsNumber = parseFloat(params.newValue);
        var field = params.colDef.field;
        var data = params.data;
        data[field] = valueAsNumber;
    }
    
    function PersonFilter() {
    }
    
    PersonFilter.prototype.init = function (params) {
        this.$scope = params.$scope;
        this.$scope.onFilterChanged = function() {
            params.filterChangedCallback();
        };
        this.valueGetter = params.valueGetter;
    };
    
    PersonFilter.prototype.getGui = function () {
        return '<div style="padding: 4px; width: 200px;">' +
            '<div style="font-weight: bold;">Example Custom Filter</div>' +
            '<div><input style="margin: 4px 0px 4px 0px;" type="text" ng-model="filterText" ng-change="onFilterChanged()" placeholder="Full name search..."/></div>' +
            '<div>This filter does partial word search, the following all bring back the name Sophie Beckham:</div>' +
            '<div>=> "sophie"</div>' +
            '<div>=> "beckham"</div>' +
            '<div>=> "sophie beckham"</div>' +
            '<div>=> "beckham sophie"</div>' +
            '<div>=> "beck so"</div>' +
            '</div>';
    };
    
    PersonFilter.prototype.doesFilterPass = function (params) {
        var filterText = this.$scope.filterText;
        if (!filterText) {
            return true;
        }
        // make sure each word passes separately, ie search for firstname, lastname
        var passed = true;
        var value = this.valueGetter(params);
        filterText.toLowerCase().split(" ").forEach(function(filterWord) {
            if (value.toString().toLowerCase().indexOf(filterWord)<0) {
                passed = false;
            }
        });
    
        return passed;
    };
    
    PersonFilter.prototype.isFilterActive = function () {
        var value = this.$scope.filterText;
        return value !== null && value !== undefined && value !== '';
    };
    
    function WinningsFilter() {
    }
    
    WinningsFilter.prototype.init = function (params) {
    
        var uniqueId = Math.random();
        this.filterChangedCallback = params.filterChangedCallback;
        this.eGui = document.createElement("div");
        this.eGui.innerHTML =
            '<div style="padding: 4px;">' +
            '<div style="font-weight: bold;">Example Custom Filter</div>' +
            '<div><label><input type="radio" name="filter"'+uniqueId+' id="cbNoFilter">No filter</input></label></div>' +
            '<div><label><input type="radio" name="filter"'+uniqueId+' id="cbPositive">Positive</input></label></div>' +
            '<div><label><input type="radio" name="filter"'+uniqueId+' id="cbNegative">Negative</input></label></div>' +
            '<div><label><input type="radio" name="filter"'+uniqueId+' id="cbGreater50">&gt; &pound;50,000</label></div>' +
            '<div><label><input type="radio" name="filter"'+uniqueId+' id="cbGreater90">&gt; &pound;90,000</label></div>' +
            '</div>';
        this.cbNoFilter = this.eGui.querySelector('#cbNoFilter');
        this.cbPositive = this.eGui.querySelector('#cbPositive');
        this.cbNegative = this.eGui.querySelector('#cbNegative');
        this.cbGreater50 = this.eGui.querySelector('#cbGreater50');
        this.cbGreater90 = this.eGui.querySelector('#cbGreater90');
        this.cbNoFilter.checked = true; // initialise the first to checked
        this.cbNoFilter.onclick = this.filterChangedCallback;
        this.cbPositive.onclick = this.filterChangedCallback;
        this.cbNegative.onclick = this.filterChangedCallback;
        this.cbGreater50.onclick = this.filterChangedCallback;
        this.cbGreater90.onclick = this.filterChangedCallback;
        this.valueGetter = params.valueGetter;
    };
    
    WinningsFilter.prototype.getGui = function () {
        return this.eGui;
    };
    
    WinningsFilter.prototype.doesFilterPass = function (node) {
        var value = this.valueGetter(node);
        if (this.cbNoFilter.checked) {
            return true;
        } else if (this.cbPositive.checked) {
            return value >= 0;
        } else if (this.cbNegative.checked) {
            return value < 0;
        } else if (this.cbGreater50.checked) {
            return value >= 50000;
        } else if (this.cbGreater90.checked) {
            return value >= 90000;
        } else {
            console.error('invalid checkbox selection');
        }
    };
    
    WinningsFilter.prototype.isFilterActive = function () {
        return !this.cbNoFilter.checked;
    };
    
    function headerCellRenderer_dom(colDef) {
        var eContainer = document.createElement("span");
        eContainer.style.border = '1px solid darkgreen';
    
        var eText = document.createTextNode(colDef.displayName);
        eContainer.appendChild(eText);
    
        return eContainer;
    }
    
    function headerCellRenderer_text(params) {
        return params.colDef.displayName;
    }
    
    function headerCellRenderer_angular(params) {
        params.$scope.showIcon = false;
        return '<span ng-mouseover="showIcon = true" ng-mouseleave="showIcon = false">' +
            '<img ' +
            '   src="http://upload.wikimedia.org/wikipedia/commons/1/12/User_icon_2.svg"' +
            '   style="width: 20px; position: absolute; top: 3px; left: 5px;"' +
            '   ng-show="showIcon" ng-bind="colDef.displayName">' +
            //'{{colDef.displayName}}' +
            '</span>';
    }
    
    /*
    function groupAggFunction(nodes) {
        var colsToSum = ['bankBalance','totalWinnings','jan','feb',"mar","apr","may","jun","jul","aug","sep","oct","nov","dec"];
        var sums = {};
        colsToSum.forEach(function(key) { sums[key] = 0; });
    
        nodes.forEach(function(node) {
            colsToSum.forEach(function(key) {
                sums[key] += node.data[key];
            });
        });
    
        return sums;
    }
    */
    
    function ratingFilterRenderer(params)  {
        return ratingRendererGeneral(params.value, true)
    }
    
    function ratingRenderer(params) {
        return ratingRendererGeneral(params.value, false)
    }
    
    function ratingRendererGeneral(value, forFilter)  {
        var result = '<span>';
        for (var i = 0; i<5; i++) {
            if (value>i) {
                result += '<img src="images/goldStar.png"/>';
            }
        }
        if (forFilter && value === 0) {
            result += '(no stars)';
        }
        return result;
    }

    function getLang() {
         if (navigator.languages != undefined) 
         return navigator.languages[0]; 
         else 
         return navigator.language;
    }

    function currencyCssFunc(params) {
        if (params.value!==null && params.value!==undefined && params.value<0) {
            return {"color": "red", "text-align": "right", "font-weight": "bold"};
        } else {
            return {"text-align": "right"};
        }
    }
    
    function currencyRenderer(params)  {
        if (params.value===null || params.value===undefined) {
            return null;
        } else if (isNaN(params.value)) {
            return 'NaN';
        } else {
            val = Number(params.value);
            return val.toLocaleString(getLang(),{ maximumFractionDigits:2});
        }
    }
    
    function booleanComparator(value1, value2) {
        var value1Cleaned = booleanCleaner(value1);
        var value2Cleaned = booleanCleaner(value2);
        var value1Ordinal = value1Cleaned===true ? 0 : (value1Cleaned===false ? 1 : 2);
        var value2Ordinal = value2Cleaned===true ? 0 : (value2Cleaned===false ? 1 : 2);
        return value1Ordinal - value2Ordinal;
    }
    
    function booleanCellRenderer(params) {
        var valueCleaned = booleanCleaner(params.value);
        if (valueCleaned===true) {
            //this is the unicode for tick character
            return "<span title='true'>&#10004;</span>";
        } else if (valueCleaned===false) {
            //this is the unicode for cross character
            return "<span title='false'>&#10006;</span>";
        } else {
            return null;
        }
    }
    
    function booleanFilterCellRenderer(params) {
        var valueCleaned = booleanCleaner(params.value);
        if (valueCleaned===true) {
            //this is the unicode for tick character
            return "&#10004;";
        } else if (valueCleaned===false) {
            //this is the unicode for cross character
            return "&#10006;";
        } else {
            return "(empty)";
        }
    }
    
    function booleanCleaner(value) {
        if (value==="true" || value===true || value===1) {
            return true;
        } else if (value==="false" || value===false || value===0) {
            return false;
        } else {
            return null;
        }
    }
    
    function languageCellRenderer(params) {
        if (params.$scope) {
            return "<span ng-click='clicked=true' ng-show='!clicked'>Click Me</span>" +
                "<span ng-click='clicked=false' ng-show='clicked' ng-bind='data.language'></span>";
        } else if (params.value) {
            return params.value;
        } else {
            return null;
        }
    }
    
    function countryCellRenderer(params) {
        //get flags from here: http://www.freeflagicons.com/
        if (params.value==="" || params.value===undefined || params.value===null) {
            return null;
        } else {
            var flag = "<img border='0' width='15' height='10' src='http://flags.fmcdn.net/data/flags/mini/"+COUNTRY_CODES[params.value]+".png'>";
            return flag + " " + params.value;
        }
    }
    
    function parseFloat2(str) {
            str = (str + '').replace(/[^\d,.-]/g, '')
            var sign = str.charAt(0) === '-' ? '-' : '+'
            var minor = str.match(/[.,](\d+)$/)
            str = str.replace(/[.,]\d*$/, '').replace(/\D/g, '')
            return Number(sign + str + (minor ? '.' + minor[1] : ''))
     }

    function getFormattedDate(input) {
                
        var date = new Date(input);
        var d = date.getDate()
        var dd = '0'+d.toString();
        dd = dd.substr(dd.length-2);
        var m = date.getMonth();
        var mm = '0'+m.toString();
        mm = mm.substr(mm.length-2);
        var yyyy = date.getFullYear().toString();
        var arr = new Array( "Jan", "Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
        var mmm = arr[m];
        return yyyy+"-"+mm+"-"+dd; 
    }
    
    function outlineComparator( a, b ) {
        var sorta = $.map( String(a).split(".") , function(v) { return v.length > 10 ? v : ('0000000000'+v).substr(-10) } ).join('.');
        var sortb = $.map( String(b).split(".") , function(v) { return v.length > 10 ? v : ('0000000000'+v).substr(-10) } ).join('.');
        return (sorta < sortb)?-1:((sorta > sortb)? 1:0); 
    }
    
    function outlineComparatorTaskNumber( a, b ) {
        return outlineComparator( a["TaskNumber"] , b["TaskNumber"] );
    }
    
  var loadRowsDemo = function ($scope){
           
            function createCols() {
                var colCount = parseInt($scope.colCount);
        
                // start with a copy of the default cols
                var columns = defaultCols.slice(0, colCount);
        
                for (var col = defaultCols.length; col<colCount; col++) {
                    var colName = colNames[col % colNames.length];
                    var colDef = {headerName: colName, field: "col"+col, width: 200, editable: true};
                    columns.push(colDef);
                }
        
                return columns;
            }
        
            function createData() {
                var rowCount = parseInt($scope.rowCount);
                var colCount = parseInt($scope.colCount);
                var data = [];
                for (var row = 1; row<=rowCount; row++) {
                    if (row%10000===0) {
                        console.log('created ' + row + ' rows');
                    }
                    var rowItem = {};
        
                    //create data for the known columns
                    var countryData = countries[row % countries.length];
                    rowItem.country = countryData.country;
                    rowItem.continent = countryData.continent;
                    rowItem.language = countryData.language;
        
                    var firstName = firstNames[row % firstNames.length];
                    var lastName = lastNames[row % lastNames.length];
                    rowItem.name = firstName + " " + lastName;
        
                    rowItem.game = games[row % games.length];
                    rowItem.bankBalance = ((Math.round(Math.random()*10000000))/100) - 3000;
                    rowItem.rating = (Math.round(Math.random()*5));
                    rowItem.bought = booleanValues[row % booleanValues.length];
        
                    var totalWinnings = 0;
                    months.forEach(function(month) {
                        var value = ((Math.round(Math.random()*10000000))/100) - 20;
                        rowItem[month.toLocaleLowerCase()] = value;
                        totalWinnings += value;
                    });
                    rowItem.totalWinnings = totalWinnings;
        
                    //create dummy data for the additional columns
                    for (var col = defaultCols.length; col<colCount; col++) {
                        var value;
                        var randomBit = Math.random().toString().substring(2,5);
                        value = colNames[col % colNames.length]+"-"+randomBit +" - (" +row+","+col+")";
                        rowItem["col"+col] = value;
                    }
                    data.push(rowItem);
                }
                return data;
            }
        
            var firstColumn = {
                headerName: "Name",
                field: "name",
                headerGroup: 'Participant',
                width: 200,
                editable: true,
                filter: PersonFilter,
                    cellRenderer: {
                        renderer: "group",
                        checkbox: true
                    },
                icons: {
                    sortAscending: '<i class="fa fa-sort-alpha-asc"/>',
                    sortDescending: '<i class="fa fa-sort-alpha-desc"/>'
                }
            };
        
            var groupColumn = {
                headerName: "Name", field: "name", headerGroup: 'Participant', width: 200, editable: true, filter: PersonFilter,
                cellRenderer: {
                    renderer: "group",
                    checkbox: true
                }
            };
        
            var defaultCols = [
                //{headerName: "", valueGetter: "node.id", width: 20}, // this row is for showing node id, handy for testing
                firstColumn,
                {headerName: "Country", field: "country", headerGroup: 'Participant', width: 150, editable: true, cellRenderer: countryCellRenderer, filter: 'set',
                    floatCell: true,
                    filterParams: {cellRenderer: countryCellRenderer, cellHeight: 20, newRowsAction: 'keep'},
                    icons: {
                        sortAscending: '<i class="fa fa-sort-alpha-asc"/>',
                        sortDescending: '<i class="fa fa-sort-alpha-desc"/>'
                    }
                },
                {headerName: "Language", field: "language", headerGroup: 'Participant', width: 150, editable: true, filter: 'set', cellRenderer: languageCellRenderer,
                    headerTooltip: "Example tooltip for Language",
                    filterParams: {newRowsAction: 'keep'},
                    icons: {
                        sortAscending: '<i class="fa fa-sort-alpha-asc"/>',
                        sortDescending: '<i class="fa fa-sort-alpha-desc"/>'
                    }
                },
                {headerName: "Game of Choice", field: "game", headerGroup: 'Game', width: 180, editable: true, filter: 'set', cellClass: function() { return 'alphabet'; },
                    icons: {
                        sortAscending: '<i class="fa fa-sort-alpha-asc"/>',
                        sortDescending: '<i class="fa fa-sort-alpha-desc"/>'
                    }
                },
                {headerName: "Bought", field: "bought", filter: 'set', headerGroup: 'Game', editable: true, width: 100,
                    cellRenderer: booleanCellRenderer, cellStyle: {"text-align": "center"}, comparator: booleanComparator,
                    floatCell: true,
                    filterParams: {newRowsAction: 'keep', cellRenderer: booleanFilterCellRenderer}},
                {headerName: "Bank Balance", field: "bankBalance", headerGroup: 'Performance', width: 150, editable: true, filter: WinningsFilter, cellRenderer: currencyRenderer, cellStyle: currencyCssFunc,
                    filterParams: {cellRenderer: currencyRenderer},
                    aggFunc: 'sum',
                    icons: {
                        sortAscending: '<i class="fa fa-sort-amount-asc"/>',
                        sortDescending: '<i class="fa fa-sort-amount-desc"/>'
                    }
                },
                {headerName: "Extra Info 1", headerGroupShow: 'open', headerGroup: 'Performance', width: 150, editable: false,
                    suppressSorting: true, suppressMenu: true, cellStyle: {"text-align": "right"},
                    cellRenderer: function() { return 'Abra...'; } },
                {headerName: "Extra Info 2", headerGroupShow: 'open', headerGroup: 'Performance', width: 150, editable: false,
                    suppressSorting: true, suppressMenu: true, cellStyle: {"text-align": "left"},
                    cellRenderer: function() { return '...cadabra!'; } },
                {headerName: "Rating", field: "rating", width: 100, editable: true, cellRenderer: ratingRenderer,
                    floatCell: true,
                    filterParams: {cellRenderer: ratingFilterRenderer}
                },
                {headerName: "Total Winnings", field: "totalWinnings", filter: 'number', editable: true, newValueHandler: numberNewValueHandler, width: 150, cellRenderer: currencyRenderer, cellStyle: currencyCssFunc,
                    aggFunc: 'sum',
                    icons: {
                        sortAscending: '<i class="fa fa-sort-amount-asc"/>',
                        sortDescending: '<i class="fa fa-sort-amount-desc"/>'
                    }
                }
            ];
            
            // put in the month cols
             months.forEach(function(month, index) {
             defaultCols.push({headerName: month, headerGroup: 'Monthly Breakdown', field: month.toLocaleLowerCase(), width: 100, filter: 'number', editable: true,
                    newValueHandler: numberNewValueHandler, cellRenderer: currencyRenderer, filterCellRenderer: currencyRenderer,
                    cellStyle: {"text-align": "right"}})
            });
        
            $scope.angularGrid.columnDefs = createCols();
            $scope.angularGrid.rowData = createData();
        
            setInterval(function() {
                $scope.angularGrid.api.ensureIndexVisible(Math.random() * 100000);
            }, 1000);
        }
       
  var loadRowsReport = function($scope) {
            $.ajax('/services/data/v34.0/analytics/reports/00Oe0000000doaA',
                   {
                       beforeSend: function(xhr) {
                           console.log('Firing ajax for 00Oe0000000doaA');
                           xhr.setRequestHeader('Authorization', 'Bearer {!$Api.Session_ID}');
                       },
                       success: function(response) {
                           // console.log(response);
                           var columnDefs = [];
                           var rowData = [];
                           var numberFields = ["Quantity","DENOMBurdenedCost", "ProjectFunctionalBurdenedCost"]
                           var numberOptions = {width: 125, filter:'number', aggFunc: 'sum', cellStyle: currencyCssFunc, cellRenderer: currencyRenderer};
                           
                           $.each(response.reportExtendedMetadata.detailColumnInfo, function(di, de) {
                               //console.log(de.label);
                               var cd = {headerName: de.label, field: de.label.replace(/ /g, '').replace(':','')};
                               if ($.inArray(cd.field,numberFields) > -1) $.extend(cd,numberOptions)
                               columnDefs.push( cd );
                           });
                           
                           var gsDef = { cellRenderer: {renderer: "group"}, icons: { sortAscending: '<i class="fa fa-sort-alpha-asc"/>', sortDescending: '<i class="fa fa-sort-alpha-desc"/>'}};
                           $.extend(columnDefs[0],gsDef);
                           $scope.angularGrid.groupKeys= [columnDefs[0].field];
                           $scope.angularGrid.columnApi.setPinnedColumnCount( 1 );
                           
                           // console.log(columnDefs);
                           
                           $.each(response.factMap["T!T"].rows, function(di, de) {
                               //  '{"athlete":"Cindy Klassen","age":26,"country":"Canada","year":2006,"date":"26/02/2006","sport":"Speed Skating","gold":1,"silver":2,"bronze":2,"total":5}',
                               var rowline = '';
                               
                               //console.log(de.dataCells[0].value);
                               var i = 0;
                               $.each(columnDefs, function(ai, ae) {
                                   rowline +=  '"' + ae.field + '":"' +de.dataCells[i++].value + '",'
                               });
                               rowline = rowline.substring(0, rowline.length-1);
                               //console.log(rowline);
                               //var jsonrowline = JSON.stringify(eval('{"athlete":"Cindy Klassen","age":26,"country":"Canada","year":2006,"date":"26/02/2006","sport":"Speed Skating","gold":1,"silver":2,"bronze":2,"total":5}'));
                               var jsonrowline = JSON.parse('{' + rowline +'}');
                               
                               rowData.push(jsonrowline);
                               // console.log(jsonrowline);
                           });
                           //console.log(rowData);
                           var recentPeriods = [
                               // "WK1-Jun-15_F-15","WK2-Jun-15_F-15","WK3-Jun-15_F-15","WK4-Jun-15_F-15","WK5Jun-15_F-15"
                               //,"WK1-Jul-15_F-15","WK2-Jul-15_F-15","WK3-Jul-15_F-15","WK4-Jul-15_F-15"
                               "WK3-Jul-15_F-15","WK4-Jul-15_F-15"
                               ,"WK1-Aug-15_F-15","WK2-Aug-15_F-15","WK3-Aug-15_F-15","WK4-Aug-15_F-15"
                           ];
                           
                           var isRecentPeriod = function( label ){
                               return true ; //($.inArray(label,recentPeriods) > -1 ); //return (label.indexOf("F-15") > -1)
                           }
                           var periods = [], periodsArr=[];
                           var priorKey = "Prior Periods";
                           $.each(rowData,function(idx,el){
                               if(isRecentPeriod(el.PAPeriodName) && (!(periods.some(function(v,i,a){return (v.name==el.PAPeriodName)})))) {
                                   periods.push({name:el.PAPeriodName,sort:Date.parse(el.PADate),value:0});
                               }
                           });
                           periods = periods.sort(function(a,b){ sorta = a.sort ; sortb = b.sort; return ( sorta < sortb)?-2:((sorta > sortb)? 1:0);}); 
                           periods = periods.slice( periods.length-7,periods.length-1);
                           periods.unshift({name:"PriorToFY15",sort:0,value:0});
                           var agg = [];
                           $.each(periods, function(idx,el){
                               var fn = el.name.replace(/ /g, '').replace(':','');
                               var cd = $.extend({headerName: el.name, field: fn} , numberOptions);
                               columnDefs.push( cd );
                               periodsArr[el.name]=0;
                               agg.push(fn);
                           });
                           $scope.angularGrid.groupAggFields = agg ;
                           
                           $.each(rowData,function(idx,el){
                               if (!(rowData[idx].hasOwnProperty(priorKey))) $.extend(rowData[idx],periodsArr);
                               rowData[idx][isRecentPeriod(el.PAPeriodName)?el.PAPeriodName:"PriorToFY15"] += parseFloat2(el.ProjectFunctionalBurdenedCost);
                           });
                           
                           $scope.angularGrid.api.setColumnDefs( columnDefs );
                           $scope.angularGrid.api.setRowData(rowData);
                       }
                   });    	
        }
              
  var loadRowsRemoting = function($scope) {
        var projectNum = '{!wrapper.project.Id}'; //'a32e00000002t8x'; //document.getElementById('acctSearch').value;

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.ECO_PMD_LabourHoursGrid_Controller.GetCostDistLines}',
            projectNum, 
            function(result, event){
                if (event.status) {
                    console.log(result);
                    processRemoteResponse(result,$scope);
                } else if (event.type === 'exception') {
                    console.log(event);
                    //document.getElementById("responseErrors").innerHTML = 
                    //    event.message + "<br/>\n<pre>" + event.where + "</pre>";
                } else {
                    console.log(event.message);
                    //document.getElementById("responseErrors").innerHTML = event.message;
                }
            }, 
            {escape: true}
        );
    }
   
  var loadRowsRemotePaging = function($scope) {
        var projectNum = '{!obj}'; //'a32e00000002t8x'; //document.getElementById('acctSearch').value;
        var pageLength = 10000; 
        var cum = [];
      
        function loadNextPage( result , event) {
               if (event.status) {
                    var count = cum.length + result.length;
                    $(".ag-loading-center").html('<i class="fa fa-spinner fa-pulse"></i> Loaded '+count.toLocaleString()+' records...');
					if (result!=null) cum = cum.concat(result);
        			console.log(result.length);
                   if(result.length===pageLength) {
                    	console.log( 'Load GetCostDistLines - '+count );
                    	Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.ECO_PMD_LabourHoursGrid_Controller.GetCostDistLines}',
                            projectNum, result[pageLength-1].Id, 
                            loadNextPage, 
                            {escape: true}
                        );
                     } else {
                        console.log( 'Loaded GetCostDistLines > '+count );
                    	processRemoteResponse(cum,$scope);
                     }
                } else if (event.type === 'exception') {
                    console.log(event);
                    //document.getElementById("responseErrors").innerHTML = 
                    //    event.message + "<br/>\n<pre>" + event.where + "</pre>";
                } else {
                    console.log(event.message);
                    //document.getElementById("responseErrors").innerHTML = event.message;
                }
        }
        
      	console.log( 'Load GetCostDistLines - 0' );
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.ECO_PMD_LabourHoursGrid_Controller.GetCostDistLines}',
            projectNum, null,
            loadNextPage, 
            {escape: true}
        );
  }
     
  var processRemoteResponse = function( response, $scope ) {
	
  var numberFields = ["Quantity","DENOMBurdenedCost", "ProjectFunctionalBurdenedCost"];
	
  var numberOptions = {width: 125, filter:'number', aggFunc: 'sum', cellStyle: currencyCssFunc, cellRenderer: currencyRenderer};
  var groupOptions = { cellRenderer: {renderer: "group"}, sort: 'asc', icons: { sortAscending: '<i class="fa fa-sort-alpha-asc"/>', sortDescending: '<i class="fa fa-sort-alpha-desc"/>'}};
  var getColDef = function( headerName, fieldName , isNumber , isGroup, headerGroupOptions) {
  	var cd =  { 'headerName': headerName, 'field': fieldName };
  	if (isNumber) $.extend(cd, numberOptions);
  	if (isGroup) $.extend(cd, groupOptions);
    if (headerGroupOptions) $.extend(cd, headerGroupOptions)
  	return cd;
  };

	var columnDefs = [];
	var rowData = [];
    var detailsHeaderGroupOptions = {headerGroupShow: 'open', headerGroup: 'Details'};

    //columnDefs.push(getColDef('Project Number','ProjectNumber',false,true));
    //columnDefs.push(getColDef('Project Name','ProjectName',false,false));
    //columnDefs.push(getColDef('Project','Project',false,true));
    
    //columnDefs.push(getColDef('Task Number','TaskNumber',false,false));
    //columnDefs.push(getColDef('Task Name','TaskName',false,false));
    columnDefs.push(getColDef('Task','Task',false,true));
    columnDefs.push(getColDef('Exp. Item Group','ExpenditureItemTypeGroup',false,true));
    columnDefs.push(getColDef('Person/Vendor','PersonOrVendor',false,true));
      //columnDefs.push(getColDef('GL Date','GLDate',false,false));
      //columnDefs.push(getColDef('GL Period','GLPeriod',false,false));
      //columnDefs.push(getColDef('PA Date','PADate',false,false));
      //columnDefs.push(getColDef('PA Period','PAPeriod',false,false));
	columnDefs.push(getColDef('Cost Dist. Line','CostDistributionLine',false,false,{headerGroupShow: 'closed', headerGroup: 'Details'}));
	columnDefs.push(getColDef('Exp. Item Type','ExpenditureItemType',false,false,detailsHeaderGroupOptions));
    columnDefs.push(getColDef('Exp. Item.Name','ExpenditureItemName',false,false,detailsHeaderGroupOptions));
    columnDefs.push(getColDef('Local Currency','LocalCurrencyCode',false,false,detailsHeaderGroupOptions));
	columnDefs.push(getColDef('Local Cost','LocalCurrencyBurdenedCost',true,false,detailsHeaderGroupOptions));
	columnDefs.push(getColDef('Project Currency','ProjectFunctionalCurrencyCode',false,false,detailsHeaderGroupOptions));
	columnDefs.push(getColDef('Cost','ProjectFunctionalBurdenedCost',true,false));
	columnDefs.push(getColDef('Quantity','Quantity',true,false));

    $scope.angularGrid.groupKeys= [columnDefs[0].field,columnDefs[1].field,columnDefs[2].field];
	$scope.angularGrid.columnApi.setPinnedColumnCount( 1 );
    $scope.angularGrid.groupDefaultExpanded = 2; // three columns only
    $scope.angularGrid.groupHeaders = true;

	var toCols = function( obj ) {
        var projectNumber = obj.ExpenditureItem__r.ProjectTask__r.ProjectNumber__c
        , projectName = obj.ExpenditureItem__r.ProjectTask__r.pse__Project__r.Name
        , taskNumber = obj.ExpenditureItem__r.ProjectTask__r.ProjectTaskNumber__c
        , taskName = obj.ExpenditureItem__r.ProjectTask__r.Name
        , personId = obj.ExpenditureItem__r.PersonId__c
        , vendorId = obj.ExpenditureItem__r.VendorId__c
        , personOrVendor = (personId != null) ? personId : vendorId
        , personLabel = faker.name.lastName()+", "+faker.name.firstName()
        , vendorLabel = faker.company.companyName()
        , personOrVendorLabel = (personId != null) ? personLabel : vendorLabel
        , ExpenditureItemTypeGroup = obj.ExpenditureItem__r.ExpenditureType__c.split(" ")[0]
        ;
        return {
            ProjectNumber: projectNumber,
            ProjectName: projectName,
            Project: projectNumber + " - " + projectName,
            TaskNumber: taskNumber,
            TaskName: taskName,
            Task: taskNumber + " - " + taskName,
            GLDate: getFormattedDate(Number(obj.GLDate__c)),
            GLPeriod: obj.GLPeriodName__c,
            PADate: getFormattedDate(Number(obj.PADate__c)),
            PAPeriod: obj.PAPeriodName__c,
            ExpenditureItemName: obj.ExpenditureItem__r.Name,
            ExpenditureItemType: obj.ExpenditureItem__r.ExpenditureType__c,
            ExpenditureItemTypeGroup: ExpenditureItemTypeGroup,
            CostDistributionLine: obj.Name,
            PersonId: personId,
            ProjectFunctionalCurrencyCode: obj.ExpenditureItem__r.ProjectTask__r.pse__Project__r.CurrencyIsoCode,
            ProjectFunctionalBurdenedCost: obj.ProjectFunctionalBurdenedCost__c,
            LocalCurrencyCode: obj.DENOMCurrencyCode__c,
            LocalCurrencyBurdenedCost: obj.DENOMBurdenedCost__c,
            Quantity: obj.ExpenditureItem__r.Quantity__c,
            VendorId: vendorId,
            UOM: obj.ExpenditureItem__r.UOM__c,
            PersonOrVendor: personOrVendorLabel
        };
	}
    $.each(response, function( idx, el) {
		rowData.push( toCols(el) );
	});
	
	var recentPeriods = [
  // "WK1-Jun-15_F-15","WK2-Jun-15_F-15","WK3-Jun-15_F-15","WK4-Jun-15_F-15","WK5Jun-15_F-15"
  //,"WK1-Jul-15_F-15","WK2-Jul-15_F-15","WK3-Jul-15_F-15","WK4-Jul-15_F-15"
   "WK3-Jul-15_F-15","WK4-Jul-15_F-15"
  ,"WK1-Aug-15_F-15","WK2-Aug-15_F-15","WK3-Aug-15_F-15","WK4-Aug-15_F-15"
  ];
  
  var isRecentPeriod = function( label ){
      return true; //($.inArray(label,recentPeriods) > -1 ); //return (label.indexOf("F-15") > -1)
  }
  var periods = [], periodsArr=[];
  var priorKey = "PriorPeriods";
  $.each(rowData,function(idx,el){
     if(isRecentPeriod(el.PAPeriod) && (!(periods.some(function(v,i,a){return (v.name==el.PAPeriod)})))) {
        periods.push({name:el.PAPeriod,sort:el.PADate,value:0});
    }
   });
  periods = periods.sort(function(a,b){ sorta = a.sort ; sortb = b.sort; return ( sorta < sortb)?-2:((sorta > sortb)? 1:0);}); 
  periods = periods.slice(-6);
  periods.unshift({name:priorKey,sort:0,value:0});
  var agg = [];
  $.each(periods, function(idx,el){
      var fn = el.name.replace(/ /g, '').replace(':','');
      var cd = $.extend({headerName: el.name, field: fn} , numberOptions);
      columnDefs.push( cd );
      periodsArr[el.name]=0;
      agg.push(fn);
   });
  console.log(periods);
  console.log(periodsArr);
  console.log(agg);
  $scope.angularGrid.groupAggFields = agg ;

   $.each(rowData,function(idx,el){
     if (!(rowData[idx].hasOwnProperty(priorKey))) $.extend(rowData[idx],periodsArr);
     rowData[idx][rowData[idx].hasOwnProperty(el.PAPeriod)?el.PAPeriod:priorKey] += parseFloat2(el.ProjectFunctionalBurdenedCost);
     //rowData[idx][isRecentPeriod(el.PAPeriod)?el.PAPeriod:priorKey] += parseFloat2(el.ProjectFunctionalBurdenedCost);
   });

  rowData.sort(outlineComparatorTaskNumber);
  $scope.angularGrid.api.setColumnDefs( columnDefs );
  $scope.angularGrid.api.setRowData(rowData);
}

}(jQuery,angular));
    </script>
    <style id="stylelab">
        .ag-group-cell{background-color:#eeeeff;font-weight:bold;}
        .ag-row-level-0 {color:darkgoldenrod;}
        .ag-row-level-1 {color:rebeccapurple;}
        .ag-row-level-2 {color:slateblue;}
        .ag-row-level-3 {color:slategray;}
    </style>
    <div ng-app="testAngularGrid" ng-controller="mainController" auto-height="yes" additional-height="50">
  
        <div style="padding: 0px 20px 20px 20px;">
            <div style="width:250px;display:block;float:left;padding:0px 20px 0px 0px">
                <h1>{!wrapper.project.OracleProjectnumber__c} - {!wrapper.project.Name}</h1>
            </div>

            <div style="padding: 4px;">
                <!--
                Rows:
                <select ng-model="rowCount" ng-change="onRowCountChanged()">
                    <option value="10">10</option>
                    <option value="100">100</option>
                    <option value="1000">1,000</option>
                    <option value="10000">10,000</option>
                    <option value="30000">30,000</option>
                    <option value="50000">50,000</option>
                    <option value="100000">100,000</option>
                </select>
                Cols:
                <select ng-model="colCount" ng-change="onColCountChanged()">
                    <option value="5">5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
                
                Size:
                <select ng-model="size" ng-change="onSize()">
                    <option value="fill">Fill Page</option>
                    <option value="fixed">800x600</option>
                </select>

                Selection:
                <select ng-model="rowSelection" ng-change="onSelectionChanged()" style="width: 100px;">
                    <option value="">-none-</option>
                    <option value="checkbox">Checkbox</option>
                    <option value="single">Single</option>
                    <option value="multiple">Multiple</option>
                </select>
 -->

                Group Type:
                <select ng-model="groupType" ng-change="onGroupTypeChanged()" style="width: 90px;">
                    <option value="col">Col</option>
                    <option value="colWithFooter">Col with Footer</option>
                    <option value="row">Row</option>
                    <option value="rowWithFooter">Row with Footer</option>
                </select>
               
                Pinned:
                <select ng-model="pinnedColumnCount" ng-change="onPinnedColCountChanged()">
                    <option value="0">0</option>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                </select>

                Group Headers:
                <select ng-model="groupHeaders" style="width: 60px;" ng-change="onGroupHeaders()">
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                </select>

                Style:
                <select ng-model="style" style="width: 90px;">
                    <option value="">-none-</option>
                    <option value="ag-fresh">Fresh</option>
                    <option value="ag-blue">Blue</option>
                    <option value="ag-dark">Dark</option>
                </select>

                <span style="padding-left: 20px; display: inline-block;">
                    Jump to:
                    <input placeholder="row" type="text" ng-model="jumpToRowText" ng-change="jumpToRow()" style="width: 40px"/>
                    <input placeholder="col" type="text" ng-model="jumpToColText" ng-change="jumpToCol()" style="width: 40px"/>
                </span>
            </div>

            <div style="padding: 4px;">

                <input placeholder="Filter..." type="text" ng-model="angularGrid.quickFilterText"/>

                <span style="padding-left: 20px; display: inline-block;">
                    <button ng-click="toggleToolPanel()">Toggle Tool Panel</button>
                </span>

                <button ng-click="angularGrid.api.expandAll()">Expand All</button>
                <button ng-click="angularGrid.api.collapseAll()">Collapse All</button>

            </div>
        </div>
        <!-- The table div -->
        <div style="padding: 0px 20px 20px 20px; box-sizing: border-box;" auto-height="yes" additional-height="50">
            <div ag-grid="angularGrid" style="width:100%; height:0px;" class="ag-fresh" auto-height="yes" additional-height="50"></div>
       </div>
    </div>

</apex:component>