<apex:component controller="ECO_PMD_LabourHours_Controller" >
    <apex:attribute name="projectId" assignTo="{!projectName}" description="Project ID" type="String" required="true" />
    <apex:attribute name="layout" description="Desired Layout (LabourHours, LabourCost, ODCExpenses, or ODCSubs)" type="String" required="true" />

    <apex:includeScript value="{!URLFOR($Resource.angular_1_4_7_min, 'angular.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.angular_1_4_7_min, 'i18n/angular-locale_' + LOWER(locale) + '.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.agGrid210, 'dist/ag-grid.min.js')}"/>

    <apex:stylesheet value="{!URLFOR($Resource.bootstrap_3_3_5_Namespaced, 'css-bs/bootstrap.min.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.agGrid210, 'dist/ag-grid.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.agGrid210, 'dist/theme-fresh.min.css')}"/>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Faker/3.0.1/faker.min.js"></script>

    <div ng-app="eco.pmd" ng-controller="labourHoursDetailController as ctrl" style="padding: 20px 20px 20px 20px;" class="bs">
        <eco-pmd-labour-hours-detail data="ctrl.labourData" project-id="{!projectId}" project-name="{!projectName}" layout="{!layout}"/>
    </div>

    <script>
    angular.module('twygmbh.auto-height', []).directive('autoHeight', [
        /**
         * @version 0.0.4
         * @copyright TWY GmbH [All Rights Reserved]
         * @license MIT License (see LICENSE.txt)
         */
        '$window', '$timeout', function($window, $timeout) {
            return {
                link: function($scope, $element, $attrs) {
                    var combineHeights, siblings;
                    combineHeights = function(collection) {
                        var heights, i, len, node;
                        heights = 0;
                        for (i = 0, len = collection.length; i < len; i++) {
                            node = collection[i];
                            heights += node.offsetHeight;
                        }
                        return heights;
                    };
                    siblings = function($elm) {
                        var elm, i, len, ref, results;
                        ref = $elm.parent().children();
                        results = [];
                        for (i = 0, len = ref.length; i < len; i++) {
                            elm = ref[i];
                            if (elm !== $elm[0]) {
                                results.push(elm);
                            }
                        }
                        return results;
                    };
                    angular.element($window).bind('resize', function() {
                        var additionalHeight, parentHeight;
                        additionalHeight = $attrs.additionalHeight || 0;
                        parentHeight = $window.innerHeight - $element.parent()[0].getBoundingClientRect().top;
                        return $element.css('height', (parentHeight - combineHeights(siblings($element)) - additionalHeight) + "px");
                    });
                    return $timeout(function() {
                        return angular.element($window).triggerHandler('resize');
                    }, 1000);
                }
            };
        }
    ]);
    </script>

    <script>
    (function() {
        'use strict';

        angular.module('eco.pmd', ['eco.pmd.labourhoursdetail']);

        angular.module('eco.pmd')
            .controller('labourHoursDetailController', labourHoursDetailController);

        labourHoursDetailController.$inject = ['$timeout'];
        function labourHoursDetailController($timeout) {
            var vm = this;

            function loadData() {
                var projectNum = '{!projectId}'; //'a32e00000002t8x'; //document.getElementById('acctSearch').value;
                var pageLength = 10000;
                var cum = [];

                function loadNextPage(result , event) {
                    if (event.status) {
                        var count = cum.length + result.length;
                        $(".ag-loading-center").html('<i class="fa fa-spinner fa-pulse"></i> Loaded '+count.toLocaleString()+' records...');
                    	if (result!=null) cum = cum.concat(result);
                    	console.log(result.length);
                        if (result.length===pageLength && result.length !== 0) {
    	                    console.log( 'Load GetCostDistLines - '+count );
    	                    Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.ECO_PMD_LabourHours_Controller.GetCostDistLines}',
                                projectNum, result[pageLength-1].Id, '{!layout}',
                                loadNextPage,
                                {escape: true});
                        } else {
                            console.log( 'Loaded GetCostDistLines > '+count );
                          	$timeout(function() { vm.labourData = cum; });
                            if (count === 0) {
                                $(".ag-loading-center").html('No records were found.');
                            }
                        }
                    } else if (event.type === 'exception') {
                        console.log(event);
                    } else {
                        console.log(event.message);
                    }
                }

                console.log( 'Load GetCostDistLines - 0' );
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.ECO_PMD_LabourHours_Controller.GetCostDistLines}',
                    projectNum, null, '{!layout}',
                    loadNextPage,
                    {escape: true});
            }

            loadData();
        }
    }());
    </script>

    <script>
    (function() {
        'use strict';

        var ngModule = angular.module('eco.pmd.labourhoursdetail', ['agGrid', 'twygmbh.auto-height']);

        ngModule.service('faker', function() { return window.faker; });
        ngModule.service('underscore', function() { return window._; });
    }());

    angular.module("eco.pmd.labourhoursdetail").run(["$templateCache", function($templateCache) {$templateCache.put("modules/labourhoursdetail/labourHoursDetail.html","<div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-4 lead\">{{vm.projectName}}</div>\r\n        <div class=\"col-md-4 form-inline\">\r\n            <label for=\"paPeriodSelect\">Look back period</label>\r\n            <select id=\"paPeriodSelect\" class=\"form-control\" ng-model=\"vm.selectedPeriod\" ng-options=\"period.periodName for period in vm.paPeriods\" ></select>\r\n            <label for=\"lookbackCountInput\"># of periods</label>\r\n            <input id=\"lookbackCountInput\" type=\"text\" class=\"form-control\" style=\"width: 50px;\" ng-model=\"vm.lookbackCount\" placeholder=\"# of periods\" >\r\n        </div>\r\n        <div class=\"col-md-1\">\r\n            <input type=\"text\" class=\"form-control\" ng-model=\"vm.grid.quickFilterText\" placeholder=\"Filter...\" >\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n            <button class=\"btn btn-info\" ng-click=\"vm.grid.api.expandAll()\">Expand All</button>\r\n            <button class=\"btn btn-info\" ng-click=\"vm.grid.api.collapseAll()\">Collapse All</button>\r\n            <button class=\"btn btn-primary\" ng-click=\"vm.toggleToolPanel()\">{{vm.showToolPanel ? \'Hide\' : \'Show\'}} Tool Panel</button>\r\n        </div>\r\n    </div>\r\n    <div ag-grid=\"vm.grid\" style=\"width:100%;\" class=\"ag-fresh\" auto-height=\"yes\" additional-height=\"50\" />\r\n</div>\r\n");}]);

    (function() {
        'use strict';

        angular
            .module('eco.pmd.labourhoursdetail')
            .directive('ecoPmdLabourHoursDetail', labourHoursDetail);

        labourHoursDetail.$inject = [];
        function labourHoursDetail() {
            return {
                restrict: 'EA',
                scope: {
                    projectName: '@',
                    projectId: '@',
                    layout: '@',
                    data: '='
                },
                bindToController: true,
                controllerAs: 'vm',
                controller: LabourHoursDetailController,
                templateUrl: 'modules/labourhoursdetail/labourHoursDetail.html'
            };
        }

        LabourHoursDetailController.$inject = ['$filter', 'underscore', 'labourHoursTransformer'];
        function LabourHoursDetailController($filter, _, labourHoursTransformer) {
            var vm = this;

            vm.layout = vm.layout || 'LabourHours'; // one of LabourHours, LaboutCost, ODCExpenses, ODCSubs

            var layoutToPeriodField  = {
                LabourHours: 'ExpenditureItem_Quantity',
                LabourCost: 'CostDistLine_ProjectFunctionalBurdenedCost',
                ODCExpenses: 'CostDistLine_ProjectFunctionalBurdenedCost',
                ODCSubs: 'CostDistLine_ProjectFunctionalBurdenedCost'
            };

            var layoutToGroupKeys = {
                LabourHours: [ 'task', 'personOrVendor',  'expenditureItemType' ],
                LabourCost: [ 'task', 'personOrVendor', 'expenditureItemType' ],
                ODCExpenses: [ 'task', 'expenditureCategory', 'expenditureItemType' ],
                ODCSubs: [ 'task', 'personOrVendor', 'expenditureItemType' ]
            };

            vm._lookbackCount = 6;
            vm._data = [];
            vm._selectedPeriod = null;
            vm.showToolPanel = true;

            //vm.projectName = '123456 - Project Name';
            vm.grid = {
               groupHeaders: true,
               groupKeys: layoutToGroupKeys[vm.layout],
               groupHidePivotColumns: true,
               groupIncludeFooter: false,
               groupColumnDef: {
                   width: 300,
                   headerName: 'Group',
                   cellRenderer: {
                       renderer: 'group'
                   },
                   cellStyle: cellStyler
               },
               pinnedColumnCount: 1,
               showToolPanel: vm.showToolPanel,
               toolPanelSuppressValues: true,
               enableColResize: true,
               enableSorting: true,
               enableFilter: true,
               onReady: onReady
            };

            function buildColumnDefs(periodNames) {
                var beforeColumnDefs = [
                    { field: 'task', headerName: 'Task', headerGroup: 'Details', cellStyle: cellStyler },
                    { field: 'personOrVendor', headerName: 'Employee / Vendor', headerGroup: 'Details', cellStyle: cellStyler },
                    { field: 'employeeNumber', headerName: 'Emp. #', headerGroup: 'Details', headerGroupShow: 'open', cellStyle: cellStyler, width: 80 },
                    { field: 'employeeClassification', headerName: 'Emp. Classification', headerGroup: 'Details', headerGroupShow: 'open', cellStyle: cellStyler, width: 200 },
                    { field: 'expenditureCategory', headerName: 'Exp. Cat.', headerGroup: 'Details', cellStyle: cellStyler, width: 100 },
                    { field: 'expenditureItemType', headerName: 'Exp. Item Type', headerGroup: 'Details', cellStyle: cellStyler, width: 160 },
                    { field: 'expenditureOrgId', headerName: 'Exp. Org.', headerGroup: 'Details', headerGroupShow: 'open', cellStyle: cellStyler, width: 100 },
                    { field: 'operatingGroup', headerName: 'Operating Group', headerGroup: 'Business', headerGroupShow: 'open', cellStyle: cellStyler, width: 130 },
                    { field: 'geographyName', headerName: 'Geography', headerGroup: 'Business', headerGroupShow: 'open', cellStyle: cellStyler, width: 100 },
                    { field: 'region', headerName: 'Region', headerGroup: 'Business', headerGroupShow: 'open', cellStyle: cellStyler, width: 100 },
                    { field: 'district', headerName: 'District', headerGroup: 'Business', headerGroupShow: 'open', cellStyle: cellStyler, width: 100 },
                    { field: 'businessLineName', headerName: 'Business Line', headerGroup: 'Business', cellStyle: cellStyler, width: 130 },
                    { field: 'subBusinessLineName', headerName: 'Sub-Business Line', headerGroup: 'Business', headerGroupShow: 'open', cellStyle: cellStyler, width: 130 },
                    { field: 'paPeriodName', headerName: 'PA Period', headerGroup: 'Cost', headerGroupShow: 'open', cellStyle: cellStyler, width: 130 },
                    { field: 'glPeriodName', headerName: 'GL Period', headerGroup: 'Cost', headerGroupShow: 'open', cellStyle: cellStyler, width: 130 },
                    { field: 'quantity', headerName: 'Qty.', headerGroup: 'Cost', headerGroupShow: 'open', cellRenderer: numberCellRenderer, cellStyle: cellStyler, width: 80 },
                    { field: 'projectBurdenedCost', headerName: 'Burd. Cost', headerGroup: 'Cost', headerGroupShow: 'open', cellRenderer: numberCellRenderer, cellStyle: cellStyler, width: 130 },
                    { field: 'projectCurrencyCode', headerName: 'Prj. Curr.', headerGroup: 'Cost', headerGroupShow: 'open', cellStyle: cellStyler, width: 100 },
                    { field: 'functionalBurdenedCost', headerName: 'Func. Cost', headerGroup: 'Cost', headerGroupShow: 'open', cellRenderer: numberCellRenderer, cellStyle: cellStyler, width: 130 },
                    { field: 'functionalCurrencyCode', headerName: 'Func. Curr.', headerGroup: 'Cost', cellStyle: cellStyler, width: 130 },
                    { field: 'itdPriorToLookbacks', headerName: 'Prior Periods', cellRenderer: numberCellRenderer, headerGroup: 'Periods', headerGroupShow: 'open', width: 100, cellStyle: cellStyler }
                ];
                var afterColumnDefs = [
                    { field: 'inceptionToDate', headerName: 'ITD', cellRenderer: detailSummaryCellRenderer, headerGroup: 'Periods', width: 80, cellStyle: cellStyler },
                    { field: 'monthToDate', headerName: 'MTD', width: 80, cellRenderer: detailSummaryCellRenderer, cellStyle: cellStyler },
                    { field: 'yearToDate', headerName: 'YTD', width: 80, cellRenderer: detailSummaryCellRenderer, cellStyle: cellStyler }
                ];
                return beforeColumnDefs
                    .concat(periodNames.map(function (period) {
                        return { field: period, headerName: period, cellRenderer: numberCellRenderer, headerGroup: 'Periods', headerGroupShow: 'open', width: 130, cellStyle: cellStyler };
                    }))
                    .concat(afterColumnDefs);
            }

            function detailSummaryCellRenderer(params) {
                if (params.node.allChildrenCount) {
                    return numberCellRenderer(params);
                } else {
                    return '';  // for fields that are just there to provide summaries, do not display values at the detail level
                }
            }

            function numberCellRenderer(params) {
                return $filter('number')(params.value || 0, 0);
            }

            function cellStyler(params) {
               var result = {};
               if (params.colDef.headerName === 'Prior Periods' || params.colDef.headerName === 'ITD') {
                   result['background-color'] = '#D9EAF7';
               }
               if (params.node.level === 0) {
                   result['font-weight'] = 'bold';
                   result['font-style'] = 'normal';
                   result['background-color'] = '#D9EAF7';
               }
               if (params.node.level === 1) {
                   result['font-style'] = 'normal';
                   result['background-color'] = '#D9EAF7';
               }
               if (params.node.level === 2) {
                   result['font-style'] = 'normal';
               }
               if (typeof(params.value) === 'number' || params.colDef.headerGroup === 'Periods') {
                   result['text-align'] = 'right';
                   if (params.value < 0) {
                       result['color'] = '#d81e05';
                   }
               }
               return result;
            }

            vm.toggleToolPanel = function () {
                vm.showToolPanel = !vm.showToolPanel;
                vm.grid.api.showToolPanel(vm.showToolPanel);
            };

            function dataSort(it) {
                return it.task.split(".").map(function(v) { return v.length > 10 ? v : ('0000000000'+v).substr(-10); } ).join('.')
                    + '.' + it.expenditureCategory
                    + '.' + it.personId
                    + '.' + it.paPeriodDate;
            }

            function buildGrid() {
                var result = labourHoursTransformer.transformData(vm.data, vm.selectedPeriod.periodDate, vm.lookbackCount, layoutToPeriodField[vm.layout]);
                vm.grid.api.setColumnDefs(buildColumnDefs(result.periodNames));
                vm.grid.groupAggFields = [ 'quantity', 'projectBurdenedCost', 'functionalBurdenedCost', 'itdPriorToLookbacks', 'inceptionToDate', 'monthToDate', 'yearToDate' ].concat(result.periodNames);
                var group = vm.grid.columnApi.getColumnGroup('Periods');
                vm.grid.columnApi.columnGroupOpened(group, true);
                vm.grid.api.setRowData(_.sortBy(result.data, dataSort));
            }

            function setPaPeriods() {
                vm.paPeriods = _.chain(vm.data)
                    .map(function (it) {
                        return { periodName: it.CostDistLine_PAPeriodName, periodDate: it.CostDistLine_PADate };
                    })
                    .uniq(false, function (it) { return it.periodName; })
                    .sortBy('periodDate')
                    .value();
                vm.selectedPeriod = _.last(vm.paPeriods);
            }

            Object.defineProperty(vm, 'lookbackCount', {
                get: function () {
                    return vm._lookbackCount;
                },
                set: function (value) {
                    vm._lookbackCount = parseInt(value);
                    buildGrid();
                }
            });

            Object.defineProperty(vm, 'selectedPeriod', {
                get: function () {
                    return vm._selectedPeriod;
                },
                set: function (value) {
                    vm._selectedPeriod = value;
                    buildGrid();
                }
            });

            Object.defineProperty(vm, 'data', {
                get: function () { return vm._data; },
                set: function (value) {
                    vm._data = value;
                    setPaPeriods();
                }
            });

            function onReady() {
                if (vm.data.length > 0) vm.grid.api.setRowData(vm.data);
            }
        }
    }());

    (function() {
        'use strict';

        angular
            .module('eco.pmd.labourhoursdetail')
            .service('labourHoursTransformer', labourHoursTransformer);

        labourHoursTransformer.$inject = ['$filter', '$timeout', 'underscore'];
        function labourHoursTransformer($filter, $timeout, _) {
            var lookbackPeriodNames = [];

            function transformData(data, lookback, lookbackCount, fieldForPeriodColumns) {
                lookbackPeriodNames = [];
                fieldForPeriodColumns = fieldForPeriodColumns || 'ExpenditureItem_Quantity';
                var sortedData = _.sortBy(data, 'CostDistLine_PADate');
                var lookbackPeriods = calculateLookbackPeriods(sortedData, lookback, lookbackCount);
                return {
                    periodNames: lookbackPeriodNames,
                    data: sortedData.map(transformRow(lookbackPeriods, fieldForPeriodColumns))
                };
            }

            function calculateLookbackPeriods(data, lookback, lookbackCount) {
                var allPeriods = _.uniq(data.map(function (it) { return it.CostDistLine_PADate; }));
                lookback = lookback || _.last(allPeriods); // use most recent period if lookback is not specified
                lookbackCount = lookbackCount || 6;
                var periods = _.last(allPeriods.filter(function (it) { return it <= lookback; }), lookbackCount);
                return periods;
            }

            function transformRow(lookbackPeriods, fieldForPeriodColumns) {
                return function (row) {
                    var taskNumber = row.ExpenditureItem_ProjectTaskNumber
                    , taskName = row.ExpenditureItem_ProjectTaskName
                    , personId = row.ExpenditureItem_PersonId
                    , vendorId = row.ExpenditureItem_VendorId
                    , expenditureCategory = row.ExpenditureItem_ExpenditureType.split(/[\s-]+/)[0]
                    , result = {
                        task: taskNumber + " - " + taskName,
                        expenditureItemName: "",
                        expenditureItemType: row.ExpenditureItem_ExpenditureType,
                        expenditureCategory: expenditureCategory,
                        expenditureOrgId: row.ExpenditureItem_ExpenditureOrgId,
                        costDistributionLine: "",
                        personId: personId,
                        employeeNumber: row.EmployeeNumber,
                        employeeName: row.EmployeeName,
                        employeeClassification: row.EmployeeClassification,
                        vendorId: vendorId,
                        vendorName: row.VenderName,
                        personOrVendor: row.EmployeeName
                            || (row.ExpenditureItem_VendorId === "null" ? null : row.ExpenditureItem_VendorId)
                            || row.ExpenditureItem_PersonId,
                        uom: "",
                        projectCurrencyCode: row.CostDistLine_ProjectCurrencyCode,
                        projectBurdenedCost: row.CostDistLine_ProjectBurdenedCost,
                        functionalCurrencyCode: row.CostDistLine_ProjectFunctionalCurrencyCode,
                        functionalBurdenedCost: row.CostDistLine_ProjectFunctionalBurdenedCost,
                        quantity: row.ExpenditureItem_Quantity,
                        inceptionToDate: row[fieldForPeriodColumns],
                        monthToDate: 0,
                        yearToDate: 0,
                        glPeriodName: row.CostDistLine_GLPeriodName,
                        paPeriodName: row.CostDistLine_PAPeriodName,
                        paPeriodDate: row.CostDistLine_PADate,
                        operatingGroup: row.OperatingGroup,
                        geographyName: row.GeographyName,
                        region: row.Region,
                        district: row.District,
                        businessLineName: row.BusinessLineName,
                        subBusinessLineName: row.SubBusinessLineName
                    };
                    if (_.contains(lookbackPeriods, row.CostDistLine_PADate)) {
                        if (!_.contains(lookbackPeriodNames, row.CostDistLine_PAPeriodName)) lookbackPeriodNames.push(row.CostDistLine_PAPeriodName);
                        result[row.CostDistLine_PAPeriodName] = row[fieldForPeriodColumns];
                    } else if (row.CostDistLine_PADate < _.first(lookbackPeriods)) {
                        result.itdPriorToLookbacks = row[fieldForPeriodColumns];
                    }
                    if (row.CostDistLine_PAPeriodName.indexOf($filter('date')(new Date(), 'MMM') + '-' + $filter('date')(new Date(), 'yy')) !== -1) {
                        result.monthToDate = row[fieldForPeriodColumns];
                    }
                    if (row.CostDistLine_PAPeriodName.indexOf('F-'+$filter('date')(new Date(), 'yy')) !== -1) {
                        result.yearToDate = row[fieldForPeriodColumns];
                    }
                    return result;
                }
            }

            return {
                transformData: transformData
            }
        }
    }());
    </script>
</apex:component>