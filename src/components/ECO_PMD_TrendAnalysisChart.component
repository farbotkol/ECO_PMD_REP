<apex:component controller="ECO_PMD_FinancialSummaryChart_Controller">
    <apex:attribute name="projectId" description="Project Number" type="String" required="true" /> 
    
    <style id="ecopmd.css">
        .pmd-chart-moredata {font: 12px arial, sans-serif !important;}    
        .negative {color: red;}
        .pmd-panel {min-width: 400px;}
        .pmd-panel .panel-footer {margin-top:2px;margin-bottom: 2px;}
  
        .pmd-table-schedule {width:100%;}
        .pmd-table-schedule th {text-align:left;background-color:#CCCCCC;}
        .pmd-table-schedule tr:nth-child(even) {background-color:#FFFFFF;}
        .pmd-table-schedule tr:nth-child(odd) {background-color:#DDDDDD;}

        .nav, .pagination, .carousel, .panel-title a { cursor: pointer; }

        /*.fieldlist {
            margin: 0 0 -1em;
            padding: 0;
        }*/

        .fieldlist li {
            list-style: none;
            padding-bottom: 0em;
        }
        .pmd-radio label {margin-bottom:0px; font-size: 10px;}
        .pmd-date {display:none;}
    </style>  
    
    <div ng-controller="dashTrendAnalysisController" class="panel panel-default dashbox">
        <div class="panel-heading">
            {!$Label.ECO_PMD_TRENDANALYSIS_TITLE}
        </div>
         <table class='' width='100%'>
            <tr style="">
                <td>
                    <ul class="fieldlist pmd-radio">
                        <li>
                          <input type="radio" id="engine1" ng-model="SFDCDATA.chartType" value="cost" ng-change="updateDatasource('cost')" name="charttype" />
                          <label for="engine1">{!$Label.ECO_PMD_TRENDANALYSIS_COST}</label>
                        </li>
                        <li>
                          <input type="radio"  id="engine2"  ng-model="SFDCDATA.chartType" value="revenue" ng-change="updateDatasource('revenue')" name="charttype" />
                          <label  for="engine2">{!$Label.ECO_PMD_TRENDANALYSIS_REV}</label>
                        </li>
                        <li>
                          <input type="radio"  id="engine3" ng-model="SFDCDATA.chartType" value="margin" ng-change="updateDatasource('margin')" name="charttype" />
                          <label  for="engine3">{!$Label.ECO_PMD_TRENDANALYSIS_MARGIN}</label>
                        </li>
                    </ul>   
                </td>    
                <td>
                    <ul class="fieldlist pmd-radio">
                        <li>
                          <input type="radio" id="engine1" ng-model="appvd" ng-value="taAppvd"/>
                          <label for="engine1">{!$Label.ECO_PMD_TRENDANALYSIS_CURRAPPVD}</label>
                        </li>                                  
                    </ul>   
                </td>    
                <td>
                    <ul class="fieldlist pmd-radio">
                        <li>
                          <input type="radio" id="engine1" ng-model="SFDCDATA.dateRange" value="6" ng-value="6" ng-change="updateDatasource('6')"/>
                          <label for="engine1">{!$Label.ECO_PMD_TRENDANALYSIS_DEFAULT}</label>
                        </li>
                        <li>
                          <input type="radio"  id="engine2"  ng-model="SFDCDATA.dateRange" value="12" ng-change="updateDatasource('12')"/>
                          <label  for="engine2">{!$Label.ECO_PMD_TRENDANALYSIS_12MONTHS}</label>
                        </li>
                        <li>
                          <input type="radio"  id="engine3" ng-model="SFDCDATA.dateRange" value="100" ng-change="updateDatasource('100')"/>
                          <label  for="engine3">{!$Label.ECO_PMD_TRENDANALYSIS_ITD}</label>
                        </li>
                    </ul>   
                </td>    
            </tr>
        </table>

        <div class="panel-body" >    
            <div id="example">
                <div class="demo-section k-content">
                        <div id="chartTA" width='100%'></div>
                </div>        
            </div>
        </div>
        <c:ECO_PMD_PanelFooter panelID="Trend">
            {!$Label.ECO_PMD_TRENDANALYSIS_MOREINFO_DETAILS}
        </c:ECO_PMD_PanelFooter>
    </div>



    <script src="https://cdnjs.cloudflare.com/ajax/libs/Faker/3.0.1/faker.min.js"></script>
    <script>
        (function() {
        angular
        .module("ecopmd")
        .controller("dashTrendAnalysisController",dashTrendAnalysisController);

        function dashTrendAnalysisController($scope,$locale){
          $scope.exportedVariable = [];
          $scope.refreshData = exportedFunction;
            
          //console.log({{SFDCDATA.daterange}});  
          loadData($scope);
          $scope.isCollapsed = true;
          chartType="Cost";
          
          $scope.updateDatasource = function(a){
            //console.log(a);
            var chart = $("#chartTA").data("kendoChart");
            var d = "";
            if ($scope.SFDCDATA.chartType=='cost'){
              d=$scope.SFDCDATA_MERGE1;    
            }
            if ($scope.SFDCDATA.chartType=='revenue'){
              d=$scope.SFDCDATA_MERGE2;              
            }
             if ($scope.SFDCDATA.chartType=='margin'){
              d=$scope.SFDCDATA_MERGE3;
            }
                        
            d = d.slice((d.length) - $scope.SFDCDATA.dateRange);

            var dataSource = new kendo.data.DataSource( {
              data: d
            });
            chart.setDataSource(dataSource);

            $("#chartTA").data("kendoChart").refresh();
          }

                                                                 
          function internalFunction(param){
            return param;
          }
            
          function exportedFunction(){
              this.SFDCDATA=[];
              loadData(this); // this = $scope
          }
         


            function createChart() {
                $("#chartTA").kendoChart({
                        
                    resizable: true,
                    chartArea: {
                        height: 250
                    },
                    dataSource: {
                        data: $scope.SFDCDATA_MERGE
                    },
                    legend: {
                        position: "bottom"
                    },
                        seriesDefaults: {
                        type: "line",
                        stack: false
                    },                    
                    series: [{
                            type: "column",
                            field: "mtd_plan",
                            name:  "{!$Label.ECO_PMD_TRENDANALYSIS_PLAN_MTD}",
                            color: "#99CCFF",
                            axis: "MTD"
                        }, {
                            type: "column",
                            field: "mtd_actual",
                            name: "{!$Label.ECO_PMD_TRENDANALYSIS_MTD}",
                            color: "#FF9933",
                            axis: "MTD"
                        }, {
                            type: "line",
                            field: "itd_plan",
                            name: "{!$Label.ECO_PMD_TRENDANALYSIS_PLAN_ITD}",
                            color: "#99CC00",
                            axis: "ITD"
                        }, {
                            type: "line",
                            field: "itd_actual",
                            name: "{!$Label.ECO_PMD_TRENDANALYSIS_ITD}",
                            color: "#CC33FF",
                            axis: "ITD"
                        }],
                        valueAxes: [{
                            name: "MTD",
                            title: { text: "{!$Label.ECO_PMD_FINANCIALSUMMARY_MTD_USD}" },
                            labels: {template : "#= value/1000 #k"}
                            // min: 0,
                            //max: 161,
                            //majorUnit: 32
                        },{
                            name: "ITD",
                            title: { text: "{!$Label.ECO_PMD_FINANCIALSUMMARY_ITD_USD}" },
                            labels: {template : "#= value/1000 #k"}
                            //min: 0,
                            //max: 100
                        }],
                    categoryAxis: {
                        field: "period",
                        type: "string",
                        axisCrossingValues: [0,  20],
                        labels: {
                            rotation: 300//270
                        },
                        baseUnit: "Months"
                    },
                    tooltip: {
                        visible: true,
                        format: "{0}%",
                        template: "#= series.name #: #= value #"
                    },
                    filter: [
                      { field: "type", operator: "eq", value: "cost" }
                    ]
                });
            }
          
        function loadData($scope){
            $scope.exportedVariable.push(internalFunction("value"));

            ECO_PMD_FinancialSummaryChart_Controller.ProjectSnapshot(
              '{!projectId}',
                  function(result, event){
                    if(event.status) {
                        $scope.$apply(loadSnapshot($scope, result));
                        $scope.$apply(loadWeekly($scope, result));
                        $scope.$apply(transformSnapshot($scope, result));                           
                        $scope.$apply($scope.SFDCDATA_MERGE1 = mergeObj($scope.SFDCDATA_COST_MTD, $scope.SFDCDATA_COST_ITD));
                        $scope.$apply($scope.SFDCDATA_MERGE2 = mergeObj($scope.SFDCDATA_MARGIN_MTD, $scope.SFDCDATA_REVENUE_ITD));
                        $scope.$apply($scope.SFDCDATA_MERGE3 = mergeObj($scope.SFDCDATA_REVENUE_MTD, $scope.SFDCDATA_MARGIN_ITD));
                        
                        var d = $scope.SFDCDATA_MERGE1;                        
                        d = d.slice((d.length) - 6);
                        $scope.SFDCDATA_MERGE = d; 
                        createChart();
                        //UPDATE CHART TO USE CORRECT CURRENCYCODE
                        var chart = $("#chartTA").data("kendoChart");
                        chart.options.valueAxis[0].title.text = "MTD - " + $scope.SFDCDATA.currencyCode + " k";
                        chart.options.valueAxis[1].title.text = "ITD - " + $scope.SFDCDATA.currencyCode + " k";
                        $("#chartTA").data("kendoChart").refresh();
                    }
              });
            
            $(window).resize(function(){$("#chartTA").data("kendoChart").refresh();});
        
        }

        
        function mergeObj(obj1, obj2){
           var result = [];
            for (var i = 0; i < obj1.length; i++) {
                var found = false;
                for (var j = 0; j < obj2.length; j++) {
                    if (obj1[i].period == obj2[j].period) {
                        result.push($.extend(true, {}, obj1[i], obj2[j]));
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    result.push($.extend(true, {}, obj1[i]));
                }
            }
            return result;
        }

        function loadSnapshot($scope, result){
            //transformSnapshot($scope, result);
            $scope.SFDCDATA = result;
                            
        }

        function loadWeekly($scope, result){
            transformForWeeklyTemp($scope, result);            
        }



        function transformSnapshot($scope, result){
            var cost = [];
            var revenue = [];
            var margin = [];
            var lastPeriod="";
            var d = $scope.SFDCDATA;
            angular.forEach(result["financialSummaryData"],function(val,idx){
                var period = getfiscal(val.SnapshotDate__c);
                
                //COST
                var itd_actual = val.CostITD__c;
                var itd_plan = val.CostBudget__c;
                cost.push({type:'cost', period: period, snapshotdate:val.SnapshotDate__c, itd_actual: itd_actual, itd_plan:itd_plan});                

                //REVENUE
                itd_actual = val.GrossRevenueITD__c;
                itd_plan = val.GrossRevenueBudget__c;
                revenue.push({type:'revenue', period: period, snapshotdate:val.SnapshotDate__c, itd_actual: itd_actual, itd_plan:itd_plan});                

                //MARGIN
                itd_actual = val.NetMarginITD__c;
                itd_plan = faker.random.number();
                margin.push({type: 'margin', period: period, snapshotdate:val.SnapshotDate__c, itd_actual: itd_actual, itd_plan:itd_plan});                
                
                d.GMNSR += getNumeric(val.GMNSRITD__c);

            });
            $scope.SFDCDATA_COST_ITD = cost;
            $scope.SFDCDATA_REVENUE_ITD = revenue;
            $scope.SFDCDATA_MARGIN_ITD = margin;
        }

        function transformForWeeklyTemp($scope,result){
            var cost = [];
            var revenue = [];
            var margin = [];
            var lastPeriod="";
            angular.forEach(result["financialSummaryPlanData"],function(val,idx){
                var period = getfiscal(val.PeriodStartDate__c);
                //COST
                var mtd_plan = val.ApprovedCost__c;//var mtd_actual = val.ProjectFunctionalBurdenedCost__c;
                var mtd_actual = val.ApprovedCost__c;                
                buildWeekly(period, lastPeriod, mtd_actual, mtd_plan, cost);

                 //REVENUE
                mtd_plan = faker.random.number();
                mtd_actual = faker.random.number();
                buildWeekly(period, lastPeriod, mtd_actual, mtd_plan, revenue);

                //MARGIN
                mtd_plan = faker.random.number();//val.OverrideApprovedCost__c;
                mtd_actual = faker.random.number();//val.OverrideApprovedCost__c;
                buildWeekly(period, lastPeriod, mtd_actual, mtd_plan, margin);
                // if(period != lastPeriod){
                //     mon.push({period: period, mtd_actual:mtd_actual, mtd_plan:mtd_plan});
                // }               
                // var m = mon[mon.length-1];
                // m.mtd_plan+=mtd_plan;         //m.mtd_actual+=val.ProjectFunctionalBurdenedCost__c;
                // m.mtd_actual+=mtd_plan + 100;                

                lastPeriod=period;
            });
            $scope.SFDCDATA_COST_MTD = cost;
            $scope.SFDCDATA_REVENUE_MTD = revenue;
            $scope.SFDCDATA_MARGIN_MTD = margin; 

        }

        function buildWeekly(period, lastPeriod, mtd_actual, mtd_plan, arr){
          //var arr=[];
          if(period != lastPeriod){
              arr.push({period: period, mtd_actual:mtd_actual, mtd_plan:mtd_plan});
          }               
          //lastPeriod=period;
          var m = arr[arr.length-1];
          m.mtd_plan=mtd_plan;         //m.mtd_actual+=val.ProjectFunctionalBurdenedCost__c;
          m.mtd_actual=mtd_plan + 100;
          //return arr;
        }

        function getfiscal(period) {
        var d = new Date(period); 
            var m = d.getMonth() + 1;
            if(m < 10){
                m='0' + m;
            } 
            return 'FY' + d.getFullYear() + m;
            
        }

        function getNumeric(i){
            if (typeof(i) == 'undefined') {
                return 0;
            }
            else
            {
                return i;
            }
        }
                    
      }



    })();
   
    </script>

</apex:component>