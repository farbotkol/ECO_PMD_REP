<apex:component controller="ECO_PMD_FinancialSummaryChart_Controller">
	<apex:attribute name="projectId" description="Project Number" type="String" required="true" /> 

    <style id="ecopmd.css">
        .pmd-chart-moredata {font: 12px arial, sans-serif !important;}    
        .negative {color: red;}
    </style>  
    
    <div ng-controller="dashFinancialSummaryController" class="panel panel-default dashbox">
        <div class="panel-heading">
       		<a href="/apex/eco_pmd_financialdashboard?id={!projectId}">{!$Label.ECO_PMD_FINANCIALSUMMARY_TITLE} </a><span ng-Show="SFDCDATA.nodata"><b>{!$Label.ECO_PMD_NO_DATA}</b></span>
        </div>
         <table class='pmd-kpi' width='100%'>
        	<tr>
                <td ng-class="{'negative': SFDCDATA.GMNSR < 0}" ng-bind="(SFDCDATA.GMNSR | number:0) + '%'"></td>
                <td style="color:lightgray;"  ng-class="{'negative': SFDCDATA.DTWAccrual < 0}" ng-bind="(SFDCDATA.DTWAccrual | number:0) + 'k'"></td>
                <td ng-class="{'negative': SFDCDATA.DSO < 0}" ng-bind="SFDCDATA.DSO/1000 | number:0"></td>
            </tr>  
            <tr>
                <td>{!$Label.ECO_PMD_FINANCIALSUMMARY_GMNSR}</td>
                <td style="color:lightgray;">{!$Label.ECO_PMD_FINANCIALSUMMARY_ACCRUAL}</td>
                <td>{!$Label.ECO_PMD_FINANCIALSUMMARY_DSO}</td>
            </tr> 
        </table>

		<div class="panel-body" >      
            <div id="example">
                <div class="demo-section k-content">
                        <div id="chartFS" width='100%'></div>
                </div>               
            </div>
        </div>
        <c:ECO_PMD_PanelFooter panelId="FinSum">
            {!$Label.ECO_PMD_FINANCIALSUMMARY_MOREINFO_DETAILS}
        </c:ECO_PMD_PanelFooter>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Faker/3.0.1/faker.min.js"></script>
    <script>
        (function() {
        angular
        .module("ecopmd")
        .controller("dashFinancialSummaryController",dashFinancialSummaryController);

        function dashFinancialSummaryController($scope,$locale){
          $scope.exportedVariable = [];
          $scope.refreshData = exportedFunction;
            
          loadData($scope);
          $scope.isCollapsed = true;
         
                                                                            
          function internalFunction(param){
            return param;
          }
            
          function exportedFunction(){
              this.SFDCDATA=[];
              loadData(this); // this = $scope
          }
         


            function createChart() {
                $("#chartFS").kendoChart({
                    resizable: true,
                    chartArea: {
                        height: 250
                    },
                    dataSource: {
                        data: $scope.SFDCDATA_MERGE
                    },
                    legend: {
                        position: "bottom"
                    },
                        seriesDefaults: {
                        type: "line",
                        stack: false
                    },                    
                    series: [{
                            type: "column",
                            field: "mtd_plan",
                            name: "{!$Label.ECO_PMD_FINANCIALSUMMARY_COST_PLAN_MTD}",
                            color: "#99CCFF",
                            axis: "MTD"
                        }, {
                            type: "column",
                            field: "mtd_actual",
                            name: "{!$Label.ECO_PMD_FINANCIALSUMMARY_COST_MTD}",
                            color: "#FF9933",
                            axis: "MTD"
                        }, {
                            type: "line",
                            field: "itd_plan",
                            name: "{!$Label.ECO_PMD_FINANCIALSUMMARY_COST_PLAN_ITD}",
                            color: "#99CC00",
                            axis: "ITD"
                        }, {
                            type: "line",
                            field: "itd_actual",
                            name: "{!$Label.ECO_PMD_FINANCIALSUMMARY_COST_ITD}",
                            color: "#CC33FF",
                            axis: "ITD"
                        }],
                        valueAxes: [{
                            name: "MTD",
                            title: { text: "{!$Label.ECO_PMD_FINANCIALSUMMARY_MTD_USD}" },
                            labels: {template : "#= value/1000 #k"}
                            // min: 0,
                            //max: 161,
                            //majorUnit: 32
                        },{
                            name: "ITD",
                            title: { text: "{!$Label.ECO_PMD_FINANCIALSUMMARY_ITD_USD}" },
                            labels: {template : "#= value/1000 #k"}
                            //min: 0,
                            //max: 100
                        }],
                    categoryAxis: {
                        field: "period",
                        type: "string",
                        axisCrossingValues: [0,  10],
                        labels: {
                            rotation: 300//270
                        },
                        baseUnit: "months"
                    },
                    tooltip: {
                        visible: true,
                        format: "{0}%",
                        template: "#= series.name #: #= value #"
                    },
                    filter: [
                      { field: "type", operator: "eq", value: "cost" }
                    ]
                });
            }
          
        function loadData($scope){
            $scope.exportedVariable.push(internalFunction("value"));

            ECO_PMD_FinancialSummaryChart_Controller.ProjectSnapshot(
              '{!projectId}',
                  function(result, event){
                    if(event.status) {
                        $scope.$apply(loadSnapshot($scope, result));
                        $scope.$apply(loadWeekly($scope, result));
                        $scope.$apply(transformSnapshot($scope, result));                           
                        $scope.$apply($scope.SFDCDATA_MERGE = mergeObj($scope.SFDCDATA_PLAN, $scope.SFDCDATA_MTD));
                        var d = $scope.SFDCDATA_MERGE;
                        d = d.slice((d.length) - 6);
                        $scope.SFDCDATA_MERGE = d; 
                        createChart();
                         //UPDATE CHART TO USE CORRECT CURRENCYCODE
                        var chart = $("#chartFS").data("kendoChart");
                        chart.options.valueAxis[0].title.text = "MTD - " + $scope.SFDCDATA.currencyCode + " k";
                        chart.options.valueAxis[1].title.text = "ITD - " + $scope.SFDCDATA.currencyCode + " k";
                        $("#chartFS").data("kendoChart").refresh();
                    }
              });
            
            $(window).resize(function(){$("#chartFS").data("kendoChart").refresh();});
        
        }

        function mergeObj(obj1, obj2){
           var result = [];
            for (var i = 0; i < obj1.length; i++) {
                var found = false;
                for (var j = 0; j < obj2.length; j++) {
                    if (obj1[i].period == obj2[j].period) {
                        result.push($.extend(true, {}, obj1[i], obj2[j]));
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    result.push($.extend(true, {}, obj1[i]));
                }
            }
            return result;
        }

        function loadSnapshot($scope, result){
            //transformSnapshot($scope, result);
            $scope.SFDCDATA = result;
                            
        }

        function loadWeekly($scope, result){
            transformForWeeklyTemp($scope, result);            
        }



        function transformSnapshot($scope, result){

            var mon = []; // like { fiscl:"FY201501",field1:0,field2:0..}
            var lastPeriod="";
            var d = $scope.SFDCDATA;
            angular.forEach(result["financialSummaryData"],function(val,idx){
                var period = getfiscal(val.SnapshotDate__c);
                var itd_actual = val.CostITD__c;
                var itd_plan = val.CostBudget__c;
                mon.push({period: period, itd_actual: itd_actual, itd_plan:itd_plan});                
                var m = mon[mon.length-1];    
                // if(val.GMNSRITD__c <> ''){
                //    d.ttlGMNSR = getNumeric(val.GMNSRITD__c); 
                // }
                
            });
            $scope.SFDCDATA_MTD = mon;
        }

        function transformForWeeklyTemp($scope,result){
            var mon = []; // like { fiscl:"FY201501",field1:0,field2:0..}
            var merge = [];
            var lastPeriod="";
            angular.forEach(result["financialSummaryPlanData"],function(val,idx){
                var period = getfiscal(val.PeriodStartDate__c);
                var mtd_plan = val.ApprovedCost__c;
                //var mtd_actual = val.ProjectFunctionalBurdenedCost__c;
                var mtd_actual = val.ApprovedCost__c;
                if(period != lastPeriod){
                    mon.push({period: period, mtd_actual:mtd_actual, mtd_plan:mtd_plan});
                    //Actual=OverrideApprovedCost__c
                }               
                lastPeriod=period;
                var m = mon[mon.length-1];
                m.mtd_plan=val.ApprovedCost__c;
                //m.mtd_actual+=val.ProjectFunctionalBurdenedCost__c;
                m.mtd_actual=val.ApprovedCost__c + 100;

            });
            $scope.SFDCDATA_PLAN = mon;

        }

        function getfiscal(period) {
        var cd = new Date(period); 
            var cm = cd.getMonth() + 1;
            var cy = cd.getFullYear();
            var fm, fy;
            if (cm > 9) {
                fm = cm-9;
                fy = cy+1;
            } else {
                fm = cm+3;
                fy = cy;
            }
            return 'FY' + fy + ('0'+fm).slice(-2);
        }

        function getNumeric(i){
            if (typeof(i) == 'undefined') {
                return 0;
            }
            else
            {
                return i;
            }
        }
                    
      }



    })();
   
    </script>

</apex:component>