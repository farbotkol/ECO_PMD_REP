<apex:page showHeader="false" sidebar="false" standardController="pse__Proj__c" extensions="ECO_PMD_RevenueDetails_Controller">
	<apex:includeScript value="{!URLFOR($Resource.angular_1_4_7_min, 'angular.min.js')}"/>
	<!--<apex:includeScript value="{!URLFOR($Resource.angular_1_4_7_min, 'i18n/angular-locale_' + LOWER(locale) + '.js')}"/>-->
	<apex:includeScript value="{!URLFOR($Resource.bootstrap_3_3_5_Namespaced, 'ui-bootstrap-tpls-0.14.3.min.js')}" />
	<script src="https://cdnjs.cloudflare.com/ajax/libs/ag-grid/2.3.5/ag-grid.min.js"></script>
	<apex:includeScript value="{!URLFOR($Resource.ECO_PMD_twygmbh_auto_height)}" />
	<script src="https://cdnjs.cloudflare.com/ajax/libs/Faker/3.0.1/faker.min.js"></script>

	<apex:stylesheet value="{!URLFOR($Resource.bootstrap_3_3_5_Namespaced, 'css-bs/bootstrap.min.css')}" />
	<link href="https://cdnjs.cloudflare.com/ajax/libs/ag-grid/2.3.5/ag-grid.min.css" rel="stylesheet" type="text/css"></link>
	<link href="https://cdnjs.cloudflare.com/ajax/libs/ag-grid/2.3.5/theme-fresh.min.css" rel="stylesheet" type="text/css"></link>

	<div ng-app="ecopmd">
		<apex:composition template="ECO_PMD_Chrome" >

			<apex:define name="mainContent">

				<div class="ecopmd-ag-wrap">
					<div ng-controller="revenueDetailsController as ctrl">
						<eco-pmd-revenue-details data="ctrl.revenueData" project-id="{!projectId}" project-name="{!projectName}" labels="ctrl.labels" />
					</div>
				</div>

	            <!-- remove if not using broken ecosystem chrome -->
				<div style="display:none;">
					<div id="client-care-program" />
					<div id="technical-practice-networks" />
					<canvas id="case-incident-rate" /><span id="case-incident-rate-txt" />
				</div>
			</apex:define>

			<apex:define name="belowFooter">

				<script type="text/ng-template" id="eco-pmd-revenue-details-template">
					<div class="container-fluid">
						<style>
						div.ag-fresh div#borderLayout_eRootPanel div#centerRow div#east {
							float: left !important;
						}
						</style>
						<div class="clearfix">
						</div>
						<div class="row">
							<div class="col-md-4 lead"> <!--ng-bind="vm.projectName">--></div>
							<div class="col-md-8">
								<div class="form-inline pull-right">
									<label for="paPeriodSelect" ng-bind="vm.labels.lookbackPeriod"></label>
									<select id="paPeriodSelect" class="form-control" ng-model="vm.selectedPeriod" ng-options="period.periodName for period in vm.paPeriods" ></select>
									&nbsp;
									<label for="lookbackCountInput" ng-bind="vm.labels.lookbackCount"></label>
									<input id="lookbackCountInput" type="text" class="form-control" style="width: 50px;" ng-model="vm.lookbackCount" >
									&nbsp;&nbsp;&nbsp;
									<input type="text" class="form-control" ng-model="vm.grid.quickFilterText" style="width: 100px;" placeholder="{{vm.labels.filter}}" >
									&nbsp;&nbsp;&nbsp;
									<button class="btn btn-info" ng-click="vm.grid.api.expandAll()" ng-bind="vm.labels.expandAll"></button>
									<button class="btn btn-info" ng-click="vm.grid.api.collapseAll()" ng-bind="vm.labels.collapseAll"></button>
									<button class="btn btn-primary" ng-click="vm.export()" ng-bind="vm.labels.export"></button>
									<button class="btn btn-primary" ng-click="vm.toggleToolPanel()" ng-bind="vm.showToolPanel ? vm.labels.hideToolPanel : vm.labels.showToolPanel"></button>
								</div>
							</div>
						</div>
						<div class="clearfix">
						</div>
						<div ag-grid="vm.grid" ng-style="{width: vm.showToolPanel ? 'calc(100% + 200px)' : '100%'}" class="ag-fresh" auto-height="yes" additional-height="50" />
					</div>
				</script>

				<script id="revenueDetailsController">
					(function() {
						'use strict';

						angular.module('ecopmd', ['ecopmd.revenuedetails', 'ecopmd.navigator']);

						angular.module('ecopmd')
							.controller('revenueDetailsController', revenueDetailsController);

						revenueDetailsController.$inject = ['$timeout'];
						function revenueDetailsController($timeout) {
							var vm = this;

							function loadData() {
								var projectId = '{!projectId}';
								Visualforce.remoting.Manager.invokeAction(
									'{!$RemoteAction.ECO_PMD_RevenueDetails_Controller.GetRevenueData}',
									projectId,
									function (result, event) {
										if (event.status) {
											$timeout(function () { vm.revenueData = result; });
										} else {
											console.error(event);
										}
									},
									{escape: true});
							}

							function establishLabels() {
								vm.labels = {
									// Columns
									task:                           '{!$ObjectType.Revenue__c.Fields.TaskNumber__c.Label}',
									agreementNumber:                '{!$ObjectType.Revenue__c.Fields.AgreementNumber__c.Label}',
									adjustingRevenueFlag:           '{!$ObjectType.Revenue__c.Fields.AdjustingRevenueFlag__c.Label}',
									draftRevenueNumber:             '{!$ObjectType.Revenue__c.Fields.DraftRevenueNum__c.Label}',
									draftRevenueNumberCredited:     '{!$ObjectType.Revenue__c.Fields.DraftRevenueNumCredited__c.Label}',
									revenueSource:                  '{!$ObjectType.Revenue__c.Fields.RevenueSource__c.Label}',
									lineNumber:                     '{!$ObjectType.Revenue__c.Fields.LineNum__c.Label}',
									currencyCode:                   '{!$ObjectType.Revenue__c.Fields.CurrencyIsoCode.Label}',
									projectFunctionalCurrencyCode:  '{!$Label.ECOPMDProjectFunctionalCurrencyCode}',
									amount:                         '{!$ObjectType.Revenue__c.Fields.Amount__c.Label}',
									inceptionToDate:                '{!$Label.ECOPMDInceptionToDate}',
									monthToDate:                    '{!$Label.ECOPMDMonthToDate}',
									yearToDate:                     '{!$Label.ECOPMDYearToDate}',
									priorPeriods:                   '{!$Label.ECOPMDPriorPeriods}',
									glPeriodName:                   '{!$ObjectType.Revenue__c.Fields.GLPeriodName__c.Label}',
									paPeriodName:                   '{!$ObjectType.Revenue__c.Fields.PAPeriodName__c.Label}',
									paPeriodDate:                   '{!$ObjectType.Revenue__c.Fields.PADate__c.Label}',
									accruedThroughDate:             '{!$ObjectType.Revenue__c.Fields.AccrueThroughDate__c.Label}',
									// Column Groups
									group:                          '{!$Label.ECOPMDGroup}',
									details:                        '{!$Label.ECOPMDDetails}',
									periods:                        '{!$Label.ECOPMDPeriods}',
									// Button and other labels
									lookbackPeriod:                 '{!$Label.ECOPMDLookBackPeriod}',
									lookbackCount:                  '{!$Label.ECOPMDLookBackCount}',
									filter:                         '{!$Label.ECOPMDFilter}',
									export:                         '{!$Label.ECOPMDExport}',
									expandAll:                      '{!$Label.ECOPMDExpandAll}',
									collapseAll:                    '{!$Label.ECOPMDCollapseAll}',
									hideToolPanel:                  '{!$Label.ECOPMDHideToolPanel}',
									showToolPanel:                  '{!$Label.ECOPMDShowToolPanel}'
								};
							}

							establishLabels();
							loadData();
						}
					}());
				</script>

				<script id="eco-pmd-revenue-details-module">
					(function() {
						'use strict';

						var ngModule = angular.module('ecopmd.revenuedetails', ['agGrid', 'twygmbh.auto-height']);

						ngModule.service('faker', function() { return window.faker; });
						ngModule.service('underscore', function() { return window._; });
					}());
				</script>

				<script id="eco-pmd-revenue-details-directive">
					(function() {
						'use strict';

						angular
							.module('ecopmd.revenuedetails')
							.directive('ecoPmdRevenueDetails', revenueDetails);

						revenueDetails.$inject = [];
						function revenueDetails() {
							return {
								restrict: 'EA',
								scope: {
									projectName: '@',
									projectId: '@',
									data: '=',
									labels: '='
								},
								bindToController: true,
								controllerAs: 'vm',
								controller: LabourHoursDetailController,
								template: document.getElementById('eco-pmd-revenue-details-template').text
							};
						}

						LabourHoursDetailController.$inject = ['$filter', 'underscore', 'revenueDetailsTransformer'];
						function LabourHoursDetailController($filter, _, revenueDetailsTransformer) {
							var vm = this;

							vm._lookbackCount = 6;
							vm._data = [];
							vm._selectedPeriod = null;
							vm.showToolPanel = true;

							//vm.projectName = '123456 - Project Name';
							vm.grid = {
								groupHeaders: true,
								groupKeys: ['agreementNumber'],
								groupHidePivotColumns: true,
								groupIncludeFooter: false,
								groupColumnDef: {
									width: 200,
									headerName: vm.labels.group,
									cellRenderer: {
										renderer: 'group'
									},
									cellStyle: cellStyler
								},
								pinnedColumnCount: 1,
								showToolPanel: vm.showToolPanel,
								toolPanelSuppressValues: true,
								enableColResize: true,
								enableSorting: true,
								enableFilter: true,
								onReady: onReady
							};

							function buildColumnDefs(periodNames) {
								var beforeColumnDefs = [
									{ field: 'task', headerName: vm.labels.task, headerGroup: vm.labels.details, cellStyle: cellStyler },
									{ field: 'agreementNumber', headerName: vm.labels.agreementNumber, headerGroup: vm.labels.details, cellStyle: cellStyler, width: 130 },
									{ field: 'adjustingRevenueFlag', headerName: vm.labels.adjustingRevenueFlag, headerGroup: vm.labels.details, headerGroupShow: 'open', cellStyle: cellStyler, width: 120
									, cellRenderer: function (params) { return params.value ? 'Yes': 'No'; } },
									{ field: 'draftRevenueNumber', headerName: vm.labels.draftRevenueNumber, headerGroup: vm.labels.details, headerGroupShow: 'open', cellStyle: cellStyler, width: 180 },
									{ field: 'draftRevenueNumberCredited', headerName: vm.labels.draftRevenueNumberCredited, headerGroup: vm.labels.details, headerGroupShow: 'open', cellStyle: cellStyler, width: 210 },
									{ field: 'revenueSource', headerName: vm.labels.revenueSource, headerGroup: vm.labels.details, headerGroupShow: 'open', cellStyle: cellStyler, width: 150 },
									{ field: 'lineNumber', headerName: vm.labels.lineNumber, headerGroup: vm.labels.details, headerGroupShow: 'open', cellStyle: cellStyler, width: 100 },
									{ field: 'accruedThroughDate', headerName: vm.labels.accruedThroughDate, headerGroup: vm.labels.details, headerGroupShow: 'open', cellStyle: cellStyler, width: 150
									, cellRenderer: function (params) { return $filter('date')(params.value, 'longDate'); } },
									{ field: 'paPeriodName', headerName: vm.labels.paPeriodName, headerGroup: vm.labels.details, headerGroupShow: 'open', cellStyle: cellStyler, width: 130 },
									{ field: 'glPeriodName', headerName: vm.labels.glPeriodName, headerGroup: vm.labels.details, headerGroupShow: 'open', cellStyle: cellStyler, width: 130 },
									{ field: 'amount', headerName: vm.labels.amount, headerGroup: vm.labels.details, headerGroupShow: 'open', cellRenderer: numberCellRenderer, cellStyle: cellStyler, width: 130 },
									{ field: 'currencyCode', headerName: vm.labels.currencyCode, headerGroup: vm.labels.details, headerGroupShow: 'open', cellStyle: cellStyler, width: 90 },
									{ field: 'projectFunctionalCurrencyCode', headerName: vm.labels.projectFunctionalCurrencyCode, headerGroup: vm.labels.details, headerGroupShow: 'open', cellStyle: cellStyler, width: 90 },
									{ field: 'itdPriorToLookbacks', headerName: vm.labels.priorPeriods, cellRenderer: numberCellRenderer, headerGroup: vm.labels.periods, headerGroupShow: 'open', width: 100, cellStyle: cellStyler }
								];
								var afterColumnDefs = [
									{ field: 'inceptionToDate', headerName: vm.labels.inceptionToDate, cellRenderer: detailSummaryCellRenderer, headerGroup: vm.labels.periods, width: 80, cellStyle: cellStyler },
									{ field: 'monthToDate', headerName: vm.labels.monthToDate, width: 80, cellRenderer: detailSummaryCellRenderer, cellStyle: cellStyler },
									{ field: 'yearToDate', headerName: vm.labels.yearToDate, width: 80, cellRenderer: detailSummaryCellRenderer, cellStyle: cellStyler }
								];
								return beforeColumnDefs
									.concat(periodNames.map(function (period) {
										return { field: period, headerName: period, cellRenderer: numberCellRenderer, headerGroup: vm.labels.periods, headerGroupShow: 'open', width: 130, cellStyle: cellStyler };
									}))
									.concat(afterColumnDefs);
							}

							function detailSummaryCellRenderer(params) {
								if (params.node.allChildrenCount) {
									return numberCellRenderer(params);
								} else {
									return '';  // for fields that are just there to provide summaries, do not display values at the detail level
								}
							}

							function numberCellRenderer(params) {
								return $filter('number')(params.value || 0, 0);
							}

							function cellStyler(params) {
							   var result = {};
							   if (params.colDef.headerName === vm.labels.priorPeriods || params.colDef.headerName === vm.labels.inceptionToDate) {
								   result['background-color'] = '#D9EAF7';
							   }
							   if (params.node.level === 0) {
								   result['font-weight'] = 'bold';
								   result['font-style'] = 'normal';
								   result['background-color'] = '#D9EAF7';
							   }
							   if (params.node.level > 0) {
								   result['font-style'] = 'normal';
							   }
							   if (typeof(params.value) === 'number' || params.colDef.headerGroup === vm.labels.periods) {
								   result['text-align'] = 'right';
								   if (params.value < 0) {
									   result['color'] = '#d81e05';
								   }
							   }
							   return result;
							}

							vm.toggleToolPanel = function () {
								vm.showToolPanel = !vm.showToolPanel;
								vm.grid.api.showToolPanel(vm.showToolPanel);
							};

							vm.export = function () {
								var fileName = 'Revenue Details - ' + vm.projectName + '.csv';
								console.debug('exporting as', fileName);
								vm.grid.api.exportDataAsCsv({
									skipHeader: false,
									skipFooters: false,
									skipGroups: false,
									fileName: fileName
								});
							}

							function dataSort(it) {
								return it.task.split(".").map(function(v) { return v.length > 10 ? v : ('0000000000'+v).substr(-10); } ).join('.')
									+ '.' + it.agreementNumber
									+ '.' + it.lineNumber
									+ '.' + it.paPeriodDate;
							}

							function buildGrid() {
								var result = revenueDetailsTransformer.transformData(vm.data, vm.selectedPeriod.periodDate, vm.lookbackCount);
								vm.grid.api.setColumnDefs(buildColumnDefs(result.periodNames));
								vm.grid.groupAggFields = [ 'draftRevenueNumber', 'draftRevenueNumberCredited', 'amount', 'itdPriorToLookbacks', 'inceptionToDate', 'monthToDate', 'yearToDate' ].concat(result.periodNames);
								var group = vm.grid.columnApi.getColumnGroup(vm.labels.periods);
								vm.grid.columnApi.columnGroupOpened(group, true);
								vm.grid.api.setRowData(_.sortBy(result.data, dataSort));
							}

							function setPaPeriods() {
								vm.paPeriods = _.chain(vm.data)
									.map(function (it) {
										return { periodName: it.PAPeriodName__c, periodDate: it.PADate__c };
									})
									.uniq(false, function (it) { return it.periodName; })
									.sortBy('periodDate')
									.value();
								vm.selectedPeriod = _.last(vm.paPeriods);
							}

							Object.defineProperty(vm, 'lookbackCount', {
								get: function () {
									return vm._lookbackCount;
								},
								set: function (value) {
									vm._lookbackCount = parseInt(value);
									buildGrid();
								}
							});

							Object.defineProperty(vm, 'selectedPeriod', {
								get: function () {
									return vm._selectedPeriod;
								},
								set: function (value) {
									vm._selectedPeriod = value;
									buildGrid();
								}
							});

							Object.defineProperty(vm, 'data', {
								get: function () { return vm._data; },
								set: function (value) {
									vm._data = value;
									setPaPeriods();
								}
							});

							function onReady() {
								if (vm.data.length > 0) vm.grid.api.setRowData(vm.data);
							}
						}
					}());
				</script>

				<script id="eco-pmd-revenue-details-transformer">
					(function() {
						'use strict';

						angular
							.module('ecopmd.revenuedetails')
							.service('revenueDetailsTransformer', revenueDetailsTransformer);

						revenueDetailsTransformer.$inject = ['$filter', '$timeout', 'underscore'];
						function revenueDetailsTransformer($filter, $timeout, _) {
							var lookbackPeriodNames = [];

							function transformData(data, lookback, lookbackCount, fieldForPeriodColumns) {
								lookbackPeriodNames = [];
								fieldForPeriodColumns = fieldForPeriodColumns || 'Amount__c';
								var sortedData = _.sortBy(data, 'PADate__c');
								var lookbackPeriods = calculateLookbackPeriods(sortedData, lookback, lookbackCount);
								return {
									periodNames: lookbackPeriodNames,
									data: sortedData.map(transformRow(lookbackPeriods, fieldForPeriodColumns))
								};
							}

							function calculateLookbackPeriods(data, lookback, lookbackCount) {
								var allPeriods = _.uniq(data.map(function (it) { return it.PADate__c; }));
								lookback = lookback || _.last(allPeriods); // use most recent period if lookback is not specified
								lookbackCount = lookbackCount || 6;
								var periods = _.last(allPeriods.filter(function (it) { return it <= lookback; }), lookbackCount);
								return periods;
							}

							function transformRow(lookbackPeriods, fieldForPeriodColumns) {
								return function (row) {
									var taskNumber = (row.TaskNumber__r && row.TaskNumber__r.ProjectTaskNumber__c) || ''
									, taskName = (row.TaskNumber__r && row.TaskNumber__r.Name) || ''
									, result = {
										task: taskNumber + " - " + taskName,
										agreementNumber: row.AgreementNumber__c,
										adjustingRevenueFlag: row.AdjustingRevenueFlag__c,
										draftRevenueNumber: row.DraftRevenueNum__c,
										draftRevenueNumberCredited: row.DraftRevenueNumCredited__c,
										revenueSource: row.RevenueSource__c,
										lineNumber: row.LineNum__c,
										currencyCode: row.CurrencyIsoCode,
										projectFunctionalCurrencyCode: row.ProjFunCurrencyCode__c,
										amount: row.Amount__c,
										inceptionToDate: row[fieldForPeriodColumns],
										monthToDate: 0,
										yearToDate: 0,
										glPeriodName: row.GLPeriodName__c,
										paPeriodName: row.PAPeriodName__c,
										paPeriodDate: row.PADate__c,
										accruedThroughDate: row.AccrueThroughDate__c
									};
									if (_.contains(lookbackPeriods, row.PADate__c)) {
										if (!_.contains(lookbackPeriodNames, row.PAPeriodName__c)) lookbackPeriodNames.push(row.PAPeriodName__c);
										result[row.PAPeriodName__c] = row[fieldForPeriodColumns];
									} else if (row.PADate__c < _.first(lookbackPeriods)) {
										result.itdPriorToLookbacks = row[fieldForPeriodColumns];
									}
									if (row.PAPeriodName__c.indexOf($filter('date')(new Date(), 'MMM') + '-' + $filter('date')(new Date(), 'yy')) !== -1) {
										result.monthToDate = row[fieldForPeriodColumns];
									}
									if (row.PAPeriodName__c.indexOf('F-' + $filter('date')(new Date(), 'yy')) !== -1) {
										result.yearToDate = row[fieldForPeriodColumns];
									}
									return result;
								};
							}

							return {
								transformData: transformData
							};
						}
					}());
				</script>
			</apex:define>

		</apex:composition>
	</div>
</apex:page>